(******************************************************)
(*                                                    *)
(*               BAC+PA+AA                            *)
(*                                                    *)
(******************************************************)

(* ==THEORY== *)

(* public communication channel *)
free c : channel.
free ct : channel.
free cr : channel.

(* constant values *)
free hole : bitstring.
free error_mac : bitstring.
free init : bitstring.
free read : bitstring.
free ok : bitstring.

 (* Encryption (with mac inside) *)
 (* for better readability, we compact encryption+mac into the following
    construction. We modeled this using pairs of encryption+mac in BAC sub-foler. *)
fun enc(bitstring, bitstring) : bitstring.
  reduc forall xm:bitstring, xk:bitstring;
        dec(enc(xm, xk), xk) = xm.
		       (* we check mac using idTest*)
letfun idEnc(m:bitstring, k:bitstring) = enc(dec(m, k), k).

 (* Signature *)
fun spk(bitstring) : bitstring.
fun sign (bitstring, bitstring) : bitstring.
reduc forall m: bitstring , k:bitstring ;
  getmess(sign(m, k)) = m.
reduc forall m: bitstring , k:bitstring ;
  checksign(sign(m, k), spk(k)) = m.

(* generate new key from seed from two keys *)
fun hashKey(bitstring, bitstring) : bitstring.


(* ==PROTOCOL== *)

(* Active Authentication *)
let RAA (k2:bitstring, skP:bitstring,randR:bitstring) =
  out(cr, enc((init, randR), k2)); 
  in(cr, y3:bitstring);
  let m:bitstring = dec(y3, k2) in
  if checksign(m, spk(skP)) = getmess(m)
  then out(cr, ok).

let TAA (k2:bitstring, skP:bitstring, dgi:bitstring,randT:bitstring) =
  in(ct, x2:bitstring);
  let (=init, xrandR:bitstring) = dec(x2,k2) in
  out(ct, enc(sign((randT,xrandR), skP), k2)).

(* Passive Authentication *)
let RPA(k2:bitstring, skP:bitstring, randR:bitstring) =
  out(cr, enc(read, k2));
  in(cr, y4:bitstring);
  let (ydgi:bitstring, ysign:bitstring) = dec(y4, k2) in
  if checksign(ysign, spk(skP)) = ydgi
  then RAA(k2, skP, randR).

let TPA(k2:bitstring, skP:bitstring, dgi:bitstring,randT:bitstring) =
    in(ct, x3:bitstring);
    if dec(x3, k2) = read
    then out(ct, enc((dgi, sign(dgi, skP)), k2));
         TAA(k2,skP,dgi,randT).

(* BAC Protocol *)
let TB (k:bitstring, skP:bitstring, dgi:bitstring,nt:bitstring,kt:bitstring,randT:bitstring) =
(* T ----[n_t]---> R *)
    out(ct,nt);
(* T <----[{nt,nr,kr}_k]--- R *)
    in(ct,x1:bitstring);
    if idEnc(x1,k) = x1
    then 
(* T ----[{nt,nr,kt}_k]---> R *)         
         let (xnr:bitstring,=nt,xkr:bitstring) = dec(x1, k) in (
         out(ct, enc((nt,xnr,kt), k));
         TPA(hashKey(kt,xkr), skP, dgi,randT)
         ) else
         out(ct, error_mac)	(* error bitstring in FR *)
    else out(ct, error_mac).    (* error mac in FR *)
      
let RB (k:bitstring, skP:bitstring,nr:bitstring,kr:bitstring,randR:bitstring) =
(* R <----[n_t]--- T *)
    in(cr, y1:bitstring);
(* R ----[{nt,nr,kr}_k]---> T *)
    out(cr, enc((nr,y1,kr), k));
(* R <----[{nt,nr,kt}_k]--- T *)
    in(cr, y2:bitstring);
    let (=y1, =nr, ykt:bitstring) = dec(y2, k) in (
    RPA(hashKey(ykt, kr), skP,randR)
    ).

(* WHOLE SYSTEM *)
let ePassport =
  new skP : bitstring ;
  ! new k:bitstring;
    new idDGI:bitstring;	(* information stored in passports *)
    ! 
    new nt:bitstring;
    new kt:bitstring;
    new randT:bitstring;	
    new randR:bitstring;
    new nr:bitstring;
    new kr:bitstring;
        (TB(k, skP, idDGI,nt,kt,randT) | RB(k, skP,nr,kr,randR)).

process ePassport