
(********   This file has been automatically generated using the tool UKano ********)

(**********)
(* THEORY *)
(**********)

(* public communication channel *)
free c : channel.
free ci : channel.
free cr : channel.
free secret : bitstring [private].
(* constant values *)
free ok : bitstring.
free hole : bitstring.


(* Diffie-Hellman exponentiation *)
(* Symmetric Encryption *)
fun enc(bitstring, bitstring) : bitstring.
  reduc forall xm:bitstring, xk:bitstring;
        dec(enc(xm, xk), xk) = xm.
			       
(*************)
(*  *)


(* == PROTOCOL WITH NONCE VERSIONS == *)
let SYSTEM =
 !
 new k : bitstring;
   !
   new sess : bitstring;
   ((
    new nI: bitstring;
    new n2: bitstring;
    out(ci, choice[nI,n2]);
    in(ci, x: bitstring);
    new n3: bitstring;
    let (mergeOut: bitstring) = 
        choice[ 
            let ((=nI,xnr: bitstring)) = dec(x,k) in
               enc((xnr,nI),k)
            else n3
        , n3] in
    out(ci, mergeOut)
   )|(
    in(cr, ynI: bitstring);
    new nR: bitstring;
    new n1: bitstring;
    out(cr, choice[enc((ynI,nR),k),n1]);
    in(cr, y: bitstring);
    out(cr, ok)
   ))
.
process SYSTEM

