(******************************************************)
(*                                                    *)
(*               BAC+PA+AA                            *)
(*                                                    *)
(******************************************************)

(* ==THEORY== *)

(* public communication channel *)
free c : channel.
free ct : channel.
free cr : channel.

(* constant values *)
free hole : bitstring.
free error_mac : bitstring.
free init : bitstring.
free read : bitstring.
free ok : bitstring.

 (* Encryption (with mac inside) *)
fun enc(bitstring, bitstring) : bitstring.
  reduc forall xm:bitstring, xk:bitstring;
        dec(enc(xm, xk), xk) = xm.
		       (* we check mac using idTest*)
letfun idEnc(m:bitstring, k:bitstring) = enc(dec(m, k), k).

 (* Signature *)
fun spk(bitstring) : bitstring.
fun sign (bitstring, bitstring) : bitstring.
reduc forall m: bitstring , k:bitstring ;
  getmess(sign(m, k)) = m.
reduc forall m: bitstring , k:bitstring ;
  checksign(sign(m, k), spk(k)) = m.

(* generate new key from seed from two keys *)
fun hashKey(bitstring, bitstring) : bitstring.


(* ==PROTOCOL== *)
let ePassport =
new skP : bitstring;
 !
 new k_51 : bitstring;
   !
   new randR : bitstring;
   new randT : bitstring;
   new kt : bitstring;
   new nt : bitstring;
   new dgi : bitstring;
   new n2 : bitstring;
   new n3 : bitstring;
   new n4 : bitstring;
   new n5 : bitstring;
   new n6 : bitstring;
   new n7 : bitstring;
   new n8 : bitstring;
   new n9 : bitstring;
   new n10 : bitstring;
   new n11 : bitstring;
   new n12 : bitstring;
   ((
    out(ct, choice[nt,n3]);
    in(ct, x1: bitstring);
    (
        let mergeOut = let (xnr: bitstring,=nt,xkr: bitstring) = dec(x1,k_51) in
                         choice[enc((nt,xnr,kt),k_51),n6]
                       else n6 in
        out(ct, mergeOut);
        in(ct, x2: bitstring);
        (
            let mergeOut = let (xnr: bitstring,=nt,xkr: bitstring) = dec(x1,k_51) in
                             let (=init,xrandR: bitstring) = dec(x2,hashKey(kt,xkr)) in
                               choice[enc(sign((randT,xrandR),skP),hashKey(kt,xkr)),n7]
                             else n7
                           else n7 in
             out(ct, mergeOut);
            in(ct, x3: bitstring);
            (
                let mergeOut = let (xnr: bitstring,=nt,xkr: bitstring) = dec(x1,k_51) in
                                  choice[enc((dgi,sign(dgi,skP)),hashKey(kt,xkr)),n8]
                               else n8 in
                out(ct, mergeOut)
            ) | (
                0
            )
        ) | (
            0
        )
    ) | (
        out(ct, choice[error_mac,error_mac])
    ) | (
        out(ct, choice[error_mac,error_mac])
    )
   )|(
    in(cr, y1: bitstring);
    new nr : bitstring;
    new kr : bitstring;
    new n1 : bitstring;
    out(cr, choice[enc((nr,y1,kr),k_51), n1]);
    in(cr, y2: bitstring);
    (
        let mergeOut = let (=y1,=nr,ykt: bitstring) = dec(y2,k_51) in
                          choice[enc((init,randR),hashKey(ykt,kr)),n2]
                       else n2 in
        out(cr, mergeOut);
        in(cr, y3: bitstring);
        (
            new n13 : bitstring;
            let mergeOut = let (=y1,=nr,ykt: bitstring) = dec(y2,k_51) in
                             let m_52: bitstring = dec(y3,hashKey(ykt,kr)) in
                               choice[enc(read,hashKey(ykt,kr)),n13]
                             else n13
                           else n13 in
            (
                out(cr, mergeOut);
                in(cr, y4: bitstring);
                (
                    let mergeOut = let (=y1,=nr,ykt: bitstring) = dec(y2,k_51) in
                                     let (ydgi: bitstring,ysign: bitstring) = dec(y4,hashKey(ykt,kr)) in
                                        ok
                                     else ok
                                   else ok in
                    (
                        out(cr, ok)
                    ) | (
                        0
                    )
                ) | (
                    0
                )
            ) | (
                0
            )
        ) | (
            0
        )
    ) | (
        0
    )
   ))
.
process ePassport

