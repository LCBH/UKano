#####################################################################
#                                                                   #
#  UKANO: UnlinKability and ANOnymity verifier                      #
#  Lucca Hirschi                                                    #
#  http://projects.lsv.ens-cachan.fr/ukano/                         #
#  Copyright (C) 2015-2016                                          #
#                                                                   #
#####################################################################

This is a modified version of the ProVerif tool including automatic
verification of anonymity and unlinkability of 2-agents protocols.
See http://projects.lsv.ens-cachan.fr/ukano/ for more details and the
underlying theory.

The file README_PV contains the README file of ProVerif.


INSTALL

You need OCaml >=3.00 (you can find Objective Caml at ocaml.org).
Go to ./src/ and type:
   make
The executable program 'proverif' has been built.
See the file README_PV for all the details.


QUICK TEST

To quickly test the tool on our case studies: build it, go to
src/examples/ and use the script AutoCheck.sh on our case studies
(there is a subfolder for each). For instance:
       ./AutoCheck.sh Feldhofer/feldhofer.pi


USAGE

You must use the executable program proverif.
To run UKANO on a ProVerif file <filename> (see next for the expected
format of this file), use 
        ./proverif -ukano <filename>
After parsing your file, the tool creates two other files in the same
directory by using translations described in the paper. One is suffixed
with '_FOpa.pi' and can be used to check frame opacity of the given
protocol. The second suffixed with '_WAuth.pi' can be used to check
well-authentication. The latter contains a query per conditional.

The folder './examples/' contain some ProVerif files in the expected
format. It can be used as a starting point to write your own
protocols.


EXPECTED FORMAT

Only typed ProVerif files are accepted (the option '-in pitype' is
enabled by default). The file should not define new types and only use
types 'bitstring' and 'channel'. The file must declare at least one
channel 'c' (i.e., contains a line 'free c:channel.'). After the
definition of the equational theory (without any declaration of
events), the inputted file should contain a commentary:
       (* ==PROTOCOL== *)
and then define only one process corresponding to the whole multiple
sessions system. This process should satisfy the syntactical
restrictions described in [1]. However, multiple tests (conditional or
evaluation) can be performed in a row between an input and an output
if the corresponding 'else' branches are the same. You can also use most
of syntactical sugars allowed by ProVerif (e.g., modular definitions
through definitions of functions and call, etc.).
Finally, to check anonymity as well, identity names to be revealed
(and only them) must have 'id' as prefix (e.g.,  idName). 

Improve precision:
Note that, currently, UKano does not detect safe conditionals and consider
all conditiionals unsafe by default. Thus, in case some queries in the 
file checking well-authentication cannot be proved, you should remove them
from the file if they target a safe conditional (i.e., to find it, look at
the first event of the query and find the conditional it corresponds to).

If the tool cannot guess idealizations of outputs (to check frame opacity),
you can compute them manually and add it to the file as follow. 
First, the equational theory must declare a constant 'hole' by adding this
line: 'free hole:bitstring;'. Output messages that cannot be guessed
automatically should be of the form: 'choice[u,uh]' where 'u' is the real
message outputted by the protocol and 'uh' is the idealization of any concrete
message outputted here (by using the constant 'hole' instead of holes).

Finally, when frame opacity cannot be checked directly, it is sometimes
possible to make ProVerif prove it just by slightly modifying the file
without altering the underlying protocol (for instance, by moving creation
of names).

[1] L. Hirschi, D. Baelde and S. Delaune.
    A Method for Verifying Privacy-Type Properties : The Unbounded Case.
    In IEEE Symposium on Security and Privacy (Oakland), 2016. To appear.
    A copy can be found at http://projects.lsv.ens-cachan.fr/ukano/.