type token =
  | CHOICE
  | STAR
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | BAR
  | SEMI
  | NEW
  | OUT
  | IN
  | IDENT of (Piptree.ident)
  | STRING of (Piptree.ident)
  | INT of (int)
  | REPL
  | IF
  | THEN
  | ELSE
  | EQUAL
  | FUN
  | EQUATION
  | REDUCTION
  | PREDICATE
  | PROCESS
  | SLASH
  | DOT
  | EOF
  | LET
  | QUERY
  | BEFORE
  | PUTBEGIN
  | NONINTERF
  | EVENT
  | NOT
  | ELIMTRUE
  | FREE
  | SUCHTHAT
  | CLAUSES
  | RED
  | EQUIV
  | EQUIVEQ
  | WEDGE
  | DIFF
  | COLON
  | NOUNIF
  | PHASE
  | BARRIER
  | AMONG
  | WEAKSECRET
  | CANTEXT
  | FAIL
  | WHERE
  | OTHERWISE
  | DATA
  | PARAM
  | PRIVATE

open Parsing;;
let _ = parse_error;;
# 2 "piparser.mly"
(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2016                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
# 31 "piparser.mly"

open Parsing_helper
open Ptree
open Piptree
exception Syntax

# 98 "piparser.ml"
let yytransl_const = [|
  257 (* CHOICE *);
  258 (* STAR *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* BAR *);
  265 (* SEMI *);
  266 (* NEW *);
  267 (* OUT *);
  268 (* IN *);
  272 (* REPL *);
  273 (* IF *);
  274 (* THEN *);
  275 (* ELSE *);
  276 (* EQUAL *);
  277 (* FUN *);
  278 (* EQUATION *);
  279 (* REDUCTION *);
  280 (* PREDICATE *);
  281 (* PROCESS *);
  282 (* SLASH *);
  283 (* DOT *);
    0 (* EOF *);
  284 (* LET *);
  285 (* QUERY *);
  286 (* BEFORE *);
  287 (* PUTBEGIN *);
  288 (* NONINTERF *);
  289 (* EVENT *);
  290 (* NOT *);
  291 (* ELIMTRUE *);
  292 (* FREE *);
  293 (* SUCHTHAT *);
  294 (* CLAUSES *);
  295 (* RED *);
  296 (* EQUIV *);
  297 (* EQUIVEQ *);
  298 (* WEDGE *);
  299 (* DIFF *);
  300 (* COLON *);
  301 (* NOUNIF *);
  302 (* PHASE *);
  303 (* BARRIER *);
  304 (* AMONG *);
  305 (* WEAKSECRET *);
  306 (* CANTEXT *);
  307 (* FAIL *);
  308 (* WHERE *);
  309 (* OTHERWISE *);
  310 (* DATA *);
  311 (* PARAM *);
  312 (* PRIVATE *);
    0|]

let yytransl_block = [|
  269 (* IDENT *);
  270 (* STRING *);
  271 (* INT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\001\000\003\000\
\003\000\006\000\006\000\020\000\020\000\022\000\022\000\007\000\
\007\000\004\000\004\000\005\000\005\000\005\000\005\000\005\000\
\024\000\024\000\023\000\023\000\008\000\008\000\025\000\025\000\
\014\000\014\000\015\000\015\000\015\000\015\000\028\000\028\000\
\026\000\026\000\029\000\029\000\029\000\029\000\027\000\027\000\
\030\000\030\000\017\000\017\000\031\000\031\000\031\000\018\000\
\013\000\013\000\032\000\032\000\032\000\032\000\033\000\034\000\
\034\000\034\000\034\000\034\000\035\000\035\000\035\000\035\000\
\035\000\038\000\038\000\036\000\036\000\039\000\039\000\039\000\
\039\000\037\000\037\000\040\000\040\000\012\000\012\000\010\000\
\016\000\016\000\011\000\011\000\019\000\019\000\019\000\041\000\
\041\000\042\000\042\000\042\000\042\000\043\000\043\000\021\000\
\021\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\044\000\044\000\045\000\045\000\045\000\
\045\000\046\000\046\000\000\000"

let yylen = "\002\000\
\007\000\006\000\004\000\008\000\005\000\007\000\006\000\006\000\
\006\000\006\000\006\000\006\000\004\000\004\000\004\000\006\000\
\005\000\004\000\008\000\005\000\003\000\000\000\004\000\001\000\
\000\000\005\000\004\000\003\000\001\000\007\000\003\000\003\000\
\001\000\003\000\005\000\001\000\004\000\006\000\001\000\003\000\
\003\000\001\000\001\000\000\000\003\000\001\000\005\000\001\000\
\003\000\001\000\004\000\001\000\003\000\004\000\003\000\001\000\
\001\000\000\000\006\000\004\000\005\000\003\000\001\000\000\000\
\005\000\003\000\002\000\000\000\003\000\003\000\003\000\002\000\
\003\000\001\000\001\000\001\000\004\000\004\000\003\000\003\000\
\003\000\003\000\001\000\003\000\004\000\001\000\003\000\004\000\
\002\000\003\000\001\000\001\000\000\000\006\000\004\000\005\000\
\003\000\001\000\000\000\005\000\003\000\002\000\000\000\004\000\
\002\000\000\000\002\000\000\000\003\000\003\000\003\000\003\000\
\001\000\003\000\001\000\003\000\003\000\005\000\001\000\003\000\
\002\000\003\000\001\000\002\000\001\000\003\000\006\000\004\000\
\007\000\007\000\006\000\008\000\006\000\008\000\003\000\006\000\
\003\000\003\000\006\000\002\000\000\000\001\000\003\000\004\000\
\002\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\024\000\148\000\
\000\000\000\000\000\000\000\000\000\000\036\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\076\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\072\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\121\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\123\000\125\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\000\000\003\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\063\000\069\000\000\000\
\000\000\013\000\071\000\070\000\000\000\083\000\000\000\105\000\
\073\000\000\000\014\000\049\000\000\000\000\000\067\000\000\000\
\109\000\111\000\110\000\018\000\000\000\000\000\000\000\112\000\
\114\000\116\000\117\000\000\000\120\000\000\000\000\000\000\000\
\000\000\000\000\092\000\107\000\000\000\000\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\124\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\041\000\037\000\000\000\000\000\000\000\000\000\
\055\000\051\000\000\000\000\000\054\000\078\000\077\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\000\000\000\000\000\000\089\000\000\000\000\000\000\000\
\000\000\104\000\000\000\102\000\000\000\000\000\000\000\000\000\
\000\000\122\000\000\000\126\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\145\000\000\000\000\000\000\000\137\000\
\000\000\138\000\000\000\000\000\000\000\005\000\000\000\032\000\
\045\000\020\000\000\000\035\000\007\000\000\000\008\000\000\000\
\000\000\084\000\082\000\000\000\000\000\047\000\016\000\000\000\
\028\000\000\000\118\000\087\000\000\000\000\000\000\000\000\000\
\098\000\090\000\000\000\009\000\002\000\010\000\011\000\012\000\
\000\000\000\000\000\000\000\000\000\000\143\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\006\000\000\000\000\000\000\000\000\000\085\000\000\000\000\000\
\088\000\000\000\000\000\000\000\000\000\146\000\144\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\061\000\000\000\065\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\136\000\139\000\000\000\004\000\
\000\000\059\000\000\000\000\000\100\000\130\000\129\000\000\000\
\000\000\000\000\030\000\096\000\000\000\000\000\000\000\000\000\
\027\000\094\000\026\000"

let yydgoto = "\002\000\
\016\000\017\000\018\000\023\000\043\000\086\001\124\000\127\000\
\121\000\051\000\105\000\182\000\031\000\038\000\032\000\082\000\
\089\000\150\000\045\000\166\000\046\000\125\000\061\000\062\000\
\039\000\070\000\141\000\071\000\142\000\159\000\034\000\035\000\
\036\000\151\000\177\000\178\000\040\001\179\000\041\001\244\000\
\047\000\048\000\049\000\252\000\001\001\002\001"

let yysindex = "\035\000\
\207\255\000\000\025\255\083\255\123\255\109\255\162\255\077\000\
\030\255\030\255\167\255\188\255\210\255\231\255\000\000\000\000\
\032\255\050\000\040\000\025\255\125\255\000\000\227\255\214\255\
\255\255\014\000\078\000\035\255\048\000\065\000\056\000\066\255\
\072\000\061\000\094\000\000\000\060\000\099\000\126\000\098\255\
\125\000\040\255\110\255\072\255\109\000\207\255\107\000\103\000\
\081\255\100\000\133\000\144\000\134\000\155\000\052\000\165\000\
\025\255\166\000\025\255\177\000\176\000\000\000\025\255\207\255\
\025\255\168\000\052\000\115\000\179\000\180\000\000\000\078\000\
\163\255\078\000\164\000\142\000\207\255\078\000\078\000\102\000\
\172\000\000\000\109\255\184\000\207\255\162\255\125\000\178\000\
\162\000\025\255\025\255\025\255\207\255\181\000\030\255\000\000\
\030\255\030\255\030\255\181\000\030\255\000\000\075\000\175\000\
\183\000\207\255\182\000\149\000\052\000\185\000\189\000\191\000\
\000\000\000\000\052\000\030\255\092\000\186\000\187\000\188\000\
\010\000\170\000\190\000\173\000\151\000\198\000\192\000\202\000\
\025\255\000\000\201\000\000\000\199\000\154\255\146\255\078\000\
\000\000\204\000\193\000\196\000\200\000\000\000\000\000\078\000\
\166\000\000\000\000\000\000\000\102\000\000\000\043\255\000\000\
\000\000\025\255\000\000\000\000\194\000\195\000\000\000\207\255\
\000\000\000\000\000\000\000\000\209\000\174\000\109\000\000\000\
\000\000\000\000\000\000\197\000\000\000\203\000\075\000\148\000\
\211\000\061\000\000\000\000\000\205\000\206\000\000\000\207\000\
\208\000\210\000\212\000\200\255\213\000\025\255\025\255\000\000\
\214\000\129\000\046\000\025\255\215\000\216\000\219\000\213\000\
\249\255\052\000\000\000\223\000\025\255\207\255\025\255\166\000\
\207\255\025\255\000\000\000\000\025\255\207\255\217\000\207\255\
\000\000\000\000\078\000\220\000\000\000\000\000\000\000\039\255\
\072\000\221\000\059\255\102\000\102\000\222\000\207\255\078\000\
\000\000\181\000\169\000\218\000\000\000\224\000\075\000\029\000\
\075\000\000\000\225\000\000\000\207\255\207\255\207\255\207\255\
\207\255\000\000\052\000\000\000\227\000\228\000\052\000\237\000\
\239\000\238\000\129\000\000\000\030\255\025\255\025\255\000\000\
\233\000\000\000\240\000\226\000\026\255\000\000\229\000\000\000\
\000\000\000\000\243\000\000\000\000\000\207\255\000\000\242\000\
\078\000\000\000\000\000\043\255\230\000\000\000\000\000\245\000\
\000\000\231\000\000\000\000\000\250\000\236\000\244\000\253\000\
\000\000\000\000\075\000\000\000\000\000\000\000\000\000\000\000\
\240\000\025\255\129\000\044\255\129\000\000\000\252\000\249\000\
\251\000\001\001\002\001\207\255\025\255\181\000\025\255\000\000\
\000\000\163\255\255\000\178\000\207\255\000\000\075\000\246\000\
\000\000\003\001\006\001\009\001\052\000\000\000\000\000\052\000\
\052\000\213\000\213\000\000\000\254\000\207\255\232\000\234\000\
\000\000\163\255\000\000\000\000\008\001\075\000\205\000\213\000\
\213\000\240\000\192\255\201\255\000\000\000\000\025\255\000\000\
\241\000\000\000\029\000\010\001\000\000\000\000\000\000\052\000\
\052\000\169\255\000\000\000\000\029\000\240\000\240\000\025\255\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\120\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\015\001\107\255\000\000\000\000\000\000\
\000\000\000\000\016\001\084\000\000\000\000\000\000\000\000\000\
\248\255\156\255\000\001\000\000\065\255\000\000\004\001\030\000\
\005\001\142\255\000\000\000\000\031\255\120\000\000\000\032\000\
\000\000\000\000\057\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\185\255\000\000\000\000\015\001\120\000\
\000\000\000\000\000\000\067\000\123\000\000\000\000\000\016\001\
\017\001\131\000\000\000\000\000\120\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\120\000\000\000\005\001\000\000\
\000\000\083\000\000\000\000\000\120\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\106\255\000\000\
\007\001\120\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\011\001\038\255\000\000\000\000\
\000\000\000\000\000\000\000\000\012\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\001\000\000\223\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\120\000\
\000\000\000\000\000\000\000\000\235\000\000\000\127\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\001\111\000\
\112\255\221\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\152\255\000\000\000\000\000\000\000\000\003\000\
\003\000\000\000\000\000\000\000\000\000\120\000\000\000\000\000\
\120\000\000\000\000\000\000\000\000\000\120\000\000\000\120\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\001\
\061\255\000\000\000\000\000\000\000\000\000\000\120\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\018\001\021\001\
\000\000\000\000\000\000\000\000\120\000\120\000\120\000\120\000\
\120\000\000\000\000\000\000\000\000\000\000\000\000\000\167\000\
\028\001\000\000\000\000\000\000\000\000\000\000\015\001\000\000\
\000\000\000\000\004\000\000\000\116\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\120\000\000\000\030\001\
\000\000\000\000\000\000\244\255\213\255\000\000\000\000\013\001\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000\000\000\000\000\009\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\120\000\000\000\000\000\000\000\000\000\
\000\000\000\000\034\001\000\000\120\000\000\000\000\000\000\000\
\000\000\019\001\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\003\000\000\000\000\000\120\000\000\000\116\255\
\000\000\000\000\000\000\000\000\035\001\000\000\000\000\003\000\
\003\000\008\000\011\000\028\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\021\000\024\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\224\255\000\000\058\001\253\255\097\000\071\001\159\255\
\196\255\000\000\000\000\000\000\142\001\205\001\019\000\228\255\
\141\001\017\000\007\000\157\255\199\001\000\000\199\255\247\255\
\000\000\102\001\000\000\165\001\041\255\247\000\000\000\000\000\
\154\001\122\255\235\254\094\255\000\000\063\001\126\255\248\000\
\210\001\000\000\000\000\074\255\141\255\027\255"

let yytablesize = 599
let yytable = "\024\000\
\172\000\198\000\141\000\135\000\140\000\131\000\135\000\127\000\
\128\000\203\000\133\000\087\000\238\000\096\000\227\000\044\000\
\060\000\008\001\010\001\197\000\134\000\074\001\033\000\132\000\
\041\000\019\000\040\000\131\000\020\000\055\001\019\000\132\000\
\161\000\020\000\061\001\001\000\215\000\021\000\072\000\115\000\
\073\000\136\000\042\000\063\000\146\000\069\000\046\000\223\000\
\188\000\093\001\228\000\202\000\155\000\123\000\192\000\128\000\
\055\000\115\000\078\000\060\000\164\000\133\000\077\001\027\001\
\046\000\083\000\228\000\048\000\083\000\113\000\113\000\113\000\
\108\001\183\000\046\000\022\000\037\001\062\001\074\000\078\001\
\022\000\079\000\115\000\090\000\229\000\078\000\060\000\162\000\
\163\000\101\000\069\000\048\000\069\000\028\001\029\001\025\000\
\147\000\148\000\093\000\033\000\229\000\167\000\083\000\169\000\
\170\000\171\000\089\001\102\000\079\000\039\000\017\001\039\000\
\027\000\039\000\093\000\039\000\091\000\078\000\039\000\211\000\
\091\000\028\000\193\000\094\000\039\000\060\000\039\000\233\000\
\063\000\091\000\106\001\093\000\093\000\039\000\033\001\026\000\
\029\000\091\000\091\000\030\000\079\000\011\001\031\000\081\000\
\230\000\039\000\039\000\039\000\039\000\242\000\060\000\093\000\
\092\000\202\000\069\000\101\001\102\001\091\000\039\000\039\000\
\106\000\039\000\222\000\106\000\106\000\225\000\126\000\224\000\
\031\000\110\001\111\001\142\000\216\000\014\001\037\000\139\000\
\018\001\120\001\140\000\050\000\214\000\021\001\106\000\023\001\
\039\000\106\000\253\000\254\000\046\000\042\000\049\001\076\001\
\004\001\042\000\052\001\121\001\042\000\106\000\031\001\202\000\
\052\000\013\001\042\000\015\001\250\000\058\001\019\001\202\000\
\202\000\024\000\112\001\042\000\044\001\045\001\046\001\047\001\
\048\001\081\000\087\001\113\001\081\000\081\000\053\000\042\000\
\042\000\042\000\042\000\079\000\003\000\106\000\004\000\079\000\
\116\001\065\000\005\000\006\000\042\000\024\001\007\000\081\000\
\008\000\009\000\122\001\054\000\010\000\065\001\106\000\106\000\
\080\000\079\000\032\001\011\000\080\000\064\000\009\001\012\000\
\075\000\251\000\057\001\060\000\013\000\014\000\015\000\141\000\
\135\000\140\000\141\000\056\001\127\000\128\000\080\000\133\000\
\098\001\202\000\075\000\099\001\100\001\141\000\135\000\140\000\
\066\000\134\000\127\000\084\001\132\000\141\000\135\000\140\000\
\131\000\067\000\127\000\128\000\092\001\133\000\106\000\134\000\
\119\000\038\001\132\000\067\001\039\001\059\000\075\001\134\000\
\208\000\003\001\132\000\118\001\119\001\104\001\131\000\109\000\
\106\000\085\001\119\000\088\001\075\000\110\000\111\000\112\000\
\113\000\108\000\114\000\115\000\116\000\052\000\056\000\052\000\
\057\000\052\000\052\000\052\000\174\000\076\000\175\000\117\000\
\027\000\027\000\077\000\108\000\118\000\058\000\052\000\176\000\
\052\000\028\000\068\000\044\000\052\000\052\000\044\000\194\000\
\052\000\119\000\120\000\114\001\044\000\080\000\083\000\052\000\
\195\000\149\000\081\000\084\000\052\000\044\000\052\000\196\000\
\052\000\086\000\028\000\086\000\085\001\086\000\072\000\086\000\
\073\000\044\000\044\000\044\000\044\000\085\000\052\000\056\000\
\086\000\052\000\056\000\056\000\194\000\088\000\044\000\058\000\
\086\000\086\000\058\000\058\000\025\000\000\001\025\000\103\000\
\022\000\097\000\098\000\099\000\196\000\056\000\095\000\239\000\
\056\000\240\000\100\000\025\000\086\000\058\000\104\000\107\000\
\058\000\185\000\186\000\187\000\056\000\113\000\113\000\113\000\
\056\000\142\000\106\000\142\000\058\000\138\000\108\000\143\000\
\058\000\122\000\126\000\129\000\130\000\136\000\134\000\144\000\
\137\000\145\000\152\000\154\000\160\000\180\000\158\000\181\000\
\190\000\165\000\191\000\204\000\184\000\189\000\199\000\206\000\
\208\000\200\000\201\000\207\000\210\000\212\000\221\000\213\000\
\218\000\205\000\220\000\234\000\219\000\241\000\232\000\237\000\
\123\001\243\000\209\000\034\001\231\000\251\000\007\001\235\000\
\153\000\026\001\030\001\157\000\036\001\050\001\051\001\255\000\
\245\000\246\000\247\000\006\001\248\000\012\001\249\000\025\001\
\003\001\053\001\054\001\022\001\043\001\059\001\236\000\202\000\
\063\001\064\001\066\001\005\001\060\001\068\001\070\001\071\001\
\079\001\069\001\072\001\073\001\080\001\082\001\081\001\090\001\
\083\001\094\001\096\001\095\001\035\001\097\001\020\001\229\000\
\107\001\103\001\117\001\044\000\058\000\016\001\093\000\064\000\
\056\000\105\001\074\000\099\000\029\000\062\001\050\000\068\000\
\147\000\103\000\156\000\115\001\062\000\033\000\034\000\066\000\
\060\000\097\000\095\000\173\000\217\000\101\000\226\000\042\001\
\168\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\091\001\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\109\001"

let yycheck = "\003\000\
\100\000\117\000\000\000\000\000\000\000\063\000\067\000\000\000\
\000\000\000\000\000\000\040\000\175\000\046\000\149\000\009\000\
\020\000\200\000\201\000\117\000\000\000\043\001\006\000\000\000\
\008\000\001\001\008\000\000\000\004\001\003\001\001\001\064\000\
\090\000\004\001\009\001\001\000\134\000\013\001\004\001\009\001\
\006\001\003\001\013\001\004\001\077\000\027\000\009\001\145\000\
\109\000\071\001\008\001\008\001\085\000\057\000\115\000\059\000\
\025\001\027\001\020\001\063\000\093\000\065\000\019\001\005\001\
\027\001\005\001\008\001\003\001\008\001\039\001\040\001\041\001\
\094\001\106\000\037\001\051\001\239\000\052\001\044\001\053\001\
\051\001\043\001\052\001\044\001\042\001\020\001\090\000\091\000\
\092\000\009\001\072\000\027\001\074\000\228\000\229\000\013\001\
\078\000\079\000\027\001\083\000\042\001\095\000\042\001\097\000\
\098\000\099\000\066\001\027\001\043\001\003\001\208\000\005\001\
\004\001\007\001\009\001\009\001\005\001\020\001\012\001\129\000\
\009\001\013\001\116\000\052\001\018\001\129\000\020\001\160\000\
\004\001\020\001\090\001\026\001\027\001\027\001\234\000\013\001\
\028\001\026\001\027\001\031\001\043\001\202\000\027\001\046\001\
\154\000\039\001\040\001\041\001\042\001\178\000\154\000\046\001\
\043\001\008\001\136\000\082\001\083\001\046\001\052\001\053\001\
\005\001\020\001\144\000\008\001\009\001\149\000\013\001\149\000\
\053\001\096\001\097\001\020\001\027\001\206\000\013\001\013\001\
\209\000\009\001\016\001\013\001\027\001\214\000\027\001\216\000\
\043\001\030\001\190\000\191\000\037\001\005\001\251\000\051\001\
\196\000\009\001\255\000\027\001\012\001\042\001\231\000\008\001\
\013\001\205\000\018\001\207\000\005\001\007\001\210\000\008\001\
\008\001\213\000\019\001\027\001\245\000\246\000\247\000\248\000\
\249\000\005\001\062\001\019\001\008\001\009\001\013\001\039\001\
\040\001\041\001\042\001\005\001\022\001\009\001\024\001\009\001\
\107\001\020\001\028\001\029\001\052\001\219\000\032\001\027\001\
\034\001\035\001\117\001\013\001\038\001\022\001\026\001\027\001\
\005\001\027\001\232\000\045\001\009\001\027\001\006\001\049\001\
\009\001\009\001\006\001\007\001\054\001\055\001\056\001\005\001\
\005\001\005\001\008\001\005\001\005\001\005\001\027\001\005\001\
\077\001\008\001\027\001\080\001\081\001\019\001\019\001\019\001\
\026\001\005\001\019\001\060\001\005\001\027\001\027\001\027\001\
\005\001\020\001\027\001\027\001\069\001\027\001\009\001\019\001\
\009\001\013\001\019\001\025\001\016\001\006\001\050\001\027\001\
\003\001\004\001\027\001\112\001\113\001\086\001\027\001\004\001\
\027\001\061\001\027\001\063\001\013\001\010\001\011\001\012\001\
\013\001\009\001\015\001\016\001\017\001\003\001\021\001\005\001\
\023\001\007\001\008\001\009\001\002\001\013\001\004\001\028\001\
\004\001\004\001\027\001\027\001\033\001\036\001\003\001\013\001\
\005\001\013\001\013\001\009\001\009\001\027\001\012\001\004\001\
\030\001\046\001\047\001\103\001\018\001\030\001\009\001\020\001\
\013\001\004\001\046\001\048\001\042\001\027\001\027\001\020\001\
\046\001\003\001\013\001\005\001\120\001\007\001\004\001\009\001\
\006\001\039\001\040\001\041\001\042\001\027\001\043\001\005\001\
\003\001\046\001\008\001\009\001\004\001\009\001\052\001\005\001\
\026\001\027\001\008\001\009\001\021\001\013\001\023\001\044\001\
\025\001\039\001\040\001\041\001\020\001\027\001\042\001\004\001\
\030\001\006\001\052\001\036\001\046\001\027\001\026\001\026\001\
\030\001\013\001\014\001\015\001\042\001\039\001\040\001\041\001\
\046\001\003\001\027\001\005\001\042\001\072\000\020\001\074\000\
\046\001\013\001\013\001\003\001\005\001\003\001\015\001\020\001\
\005\001\044\001\015\001\004\001\027\001\015\001\013\001\009\001\
\004\001\013\001\004\001\026\001\015\001\013\001\013\001\027\001\
\003\001\015\001\015\001\053\001\003\001\005\001\007\001\009\001\
\005\001\020\001\015\001\003\001\020\001\003\001\020\001\013\001\
\120\001\013\001\027\001\051\001\027\001\009\001\004\001\050\001\
\083\000\005\001\005\001\087\000\005\001\003\001\003\001\018\001\
\027\001\027\001\027\001\020\001\027\001\015\001\027\001\020\001\
\004\001\003\001\005\001\027\001\020\001\013\001\050\001\008\001\
\020\001\007\001\009\001\037\001\027\001\009\001\005\001\020\001\
\005\001\027\001\015\001\007\001\012\001\005\001\012\001\009\001\
\007\001\020\001\005\001\009\001\051\001\005\001\213\000\042\001\
\009\001\020\001\009\001\005\001\005\001\207\000\005\001\007\001\
\005\001\050\001\027\001\007\001\050\001\052\001\027\001\027\001\
\005\001\027\001\086\000\051\001\007\001\027\001\027\001\027\001\
\007\001\007\001\007\001\101\000\136\000\027\001\149\000\241\000\
\095\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\068\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\095\001"

let yynames_const = "\
  CHOICE\000\
  STAR\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  BAR\000\
  SEMI\000\
  NEW\000\
  OUT\000\
  IN\000\
  REPL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  EQUAL\000\
  FUN\000\
  EQUATION\000\
  REDUCTION\000\
  PREDICATE\000\
  PROCESS\000\
  SLASH\000\
  DOT\000\
  EOF\000\
  LET\000\
  QUERY\000\
  BEFORE\000\
  PUTBEGIN\000\
  NONINTERF\000\
  EVENT\000\
  NOT\000\
  ELIMTRUE\000\
  FREE\000\
  SUCHTHAT\000\
  CLAUSES\000\
  RED\000\
  EQUIV\000\
  EQUIVEQ\000\
  WEDGE\000\
  DIFF\000\
  COLON\000\
  NOUNIF\000\
  PHASE\000\
  BARRIER\000\
  AMONG\000\
  WEAKSECRET\000\
  CANTEXT\000\
  FAIL\000\
  WHERE\000\
  OTHERWISE\000\
  DATA\000\
  PARAM\000\
  PRIVATE\000\
  "

let yynames_block = "\
  IDENT\000\
  STRING\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 116 "piparser.mly"
 ( (FunDecl(_3, _5, _1)) :: _7 )
# 598 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 118 "piparser.mly"
 ( (DataFunDecl(_2, _4)) :: _6 )
# 607 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'eqlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 120 "piparser.mly"
 ( (Equation(_2)) :: _4 )
# 615 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'reduc) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 122 "piparser.mly"
 ( (Reduc((_3,_5)::_7, _1)) :: _8 )
# 626 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'reducmayfailseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 125 "piparser.mly"
 ( (ReducFail(_3,_1)) :: _5 )
# 635 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 128 "piparser.mly"
        ( (PredDecl(_2, _4, _5)) :: _7 )
# 645 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 130 "piparser.mly"
        ( (PredDecl(_2, _4, [])) :: _6 )
# 654 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 132 "piparser.mly"
 ( (PDef(_2,_4)) :: _6 )
# 663 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'gfactformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'optint) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'foptbindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 134 "piparser.mly"
        ( (NoUnif (_2,_3,_4)) :: _6 )
# 673 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 136 "piparser.mly"
        ( (Param(_2,S _4)) :: _6 )
# 682 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 138 "piparser.mly"
        ( (Param(_2,S _4)) :: _6 )
# 691 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 140 "piparser.mly"
        ( (Param(_2,I _4)) :: _6 )
# 700 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'queryseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 142 "piparser.mly"
        ( (Query(_2)) :: _4 )
# 708 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'niseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 144 "piparser.mly"
        ( (Noninterf(_2)) :: _4 )
# 716 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 146 "piparser.mly"
        ( (Weaksecret(_2)) :: _4 )
# 724 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'optphase) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'optbindingseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 148 "piparser.mly"
 ( (Not(((PGSimpleFact(("attacker",dummy_ext), [_2]),dummy_ext),_3),_4)) :: _6 )
# 734 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'event) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'optbindingseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 150 "piparser.mly"
 ( (Not(_2,_3)) :: _5 )
# 743 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 152 "piparser.mly"
        ( (Elimtrue (_2, [])) :: _4 )
# 751 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'varmayfail) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 154 "piparser.mly"
        ( (Elimtrue (_2, _4)) :: _8 )
# 760 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'privateopt) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'neidentseq) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 156 "piparser.mly"
        ( (Free(_3,_1)) :: _5 )
# 769 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'clauses) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lib) in
    Obj.repr(
# 158 "piparser.mly"
        ( (Clauses(_2)) :: _3 )
# 777 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "piparser.mly"
 ( [] )
# 783 "piparser.ml"
               : 'lib))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'lib) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    Obj.repr(
# 164 "piparser.mly"
 ( _1, _3 )
# 791 "piparser.ml"
               : Piptree.decl list * Piptree.process))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "piparser.mly"
 ( true )
# 797 "piparser.ml"
               : 'privateopt))
; (fun __caml_parser_env ->
    Obj.repr(
# 170 "piparser.mly"
 ( false )
# 803 "piparser.ml"
               : 'privateopt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'reduc) in
    Obj.repr(
# 176 "piparser.mly"
 ( (_1,_3) :: _5 )
# 812 "piparser.ml"
               : 'reduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 178 "piparser.mly"
 ( [(_1,_3)] )
# 820 "piparser.ml"
               : 'reduc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'varmayfail) in
    Obj.repr(
# 182 "piparser.mly"
        ( _1::_3 )
# 828 "piparser.ml"
               : 'varmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 184 "piparser.mly"
        ( [_1] )
# 835 "piparser.ml"
               : 'varmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'varmayfail) in
    Obj.repr(
# 188 "piparser.mly"
        ( (_1,_3,_5) )
# 844 "piparser.ml"
               : 'reducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 190 "piparser.mly"
        ( (_1,_3,[]) )
# 852 "piparser.ml"
               : 'reducmayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'reducmayfail) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'reducmayfailseq) in
    Obj.repr(
# 194 "piparser.mly"
 ( _1::_3 )
# 860 "piparser.ml"
               : 'reducmayfailseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'reducmayfail) in
    Obj.repr(
# 196 "piparser.mly"
 ( [_1] )
# 867 "piparser.ml"
               : 'reducmayfailseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 203 "piparser.mly"
        ( [(_1, _3)] )
# 875 "piparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'eqlist) in
    Obj.repr(
# 205 "piparser.mly"
 ( (_1, _3) :: _5 )
# 884 "piparser.ml"
               : 'eqlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 211 "piparser.mly"
 ( PFail, parse_extent () )
# 890 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 214 "piparser.mly"
 ( PFunApp (_1, _3), parse_extent() )
# 898 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'term) in
    Obj.repr(
# 216 "piparser.mly"
        ( Param.has_choice := true; 
	  PFunApp(("choice specident", parse_extent()), [_3; _5]), parse_extent() )
# 907 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 219 "piparser.mly"
 ( PIdent (_1), parse_extent() )
# 914 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'termseq) in
    Obj.repr(
# 221 "piparser.mly"
 ( PTuple (_2), parse_extent() )
# 921 "piparser.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 225 "piparser.mly"
 ( _1 :: _3 )
# 929 "piparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 227 "piparser.mly"
 ( [_1] )
# 936 "piparser.ml"
               : 'netermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'netermseq) in
    Obj.repr(
# 231 "piparser.mly"
        ( _1 )
# 943 "piparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 233 "piparser.mly"
        ( [] )
# 949 "piparser.ml"
               : 'termseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 237 "piparser.mly"
    ( _1 :: _3 )
# 957 "piparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 239 "piparser.mly"
    ( [_1] )
# 964 "piparser.ml"
               : 'neidentseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'netermseq) in
    Obj.repr(
# 243 "piparser.mly"
    ( (_1, Some _4) )
# 972 "piparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 245 "piparser.mly"
    ( (_1, None) )
# 979 "piparser.ml"
               : 'ni))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ni) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'niseq) in
    Obj.repr(
# 249 "piparser.mly"
    ( _1 :: _3 )
# 987 "piparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ni) in
    Obj.repr(
# 251 "piparser.mly"
    ( [_1] )
# 994 "piparser.ml"
               : 'niseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 257 "piparser.mly"
 ( PGFunApp (_1, _3), parse_extent() )
# 1002 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 259 "piparser.mly"
 ( PGIdent (_1), parse_extent() )
# 1009 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gtermseq) in
    Obj.repr(
# 261 "piparser.mly"
 ( PGTuple (_2), parse_extent() )
# 1016 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'bindingseq) in
    Obj.repr(
# 263 "piparser.mly"
        ( PGName (_1, _3), parse_extent() )
# 1024 "piparser.ml"
               : 'gterm))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 267 "piparser.mly"
 ( _1 :: _3 )
# 1032 "piparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 269 "piparser.mly"
 ( [_1] )
# 1039 "piparser.ml"
               : 'negtermseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negtermseq) in
    Obj.repr(
# 273 "piparser.mly"
        ( _1 )
# 1046 "piparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 275 "piparser.mly"
        ( [] )
# 1052 "piparser.ml"
               : 'gtermseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 280 "piparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1061 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 282 "piparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1069 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 284 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1078 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 286 "piparser.mly"
        ( [(_1, _3)] )
# 1086 "piparser.ml"
               : 'nesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'nesbindingseq) in
    Obj.repr(
# 290 "piparser.mly"
        ( _1 )
# 1093 "piparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 292 "piparser.mly"
        ( [] )
# 1099 "piparser.ml"
               : 'bindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'nebindingseq) in
    Obj.repr(
# 296 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1108 "piparser.ml"
               : 'nebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 298 "piparser.mly"
        ( [(_1, _3)] )
# 1116 "piparser.ml"
               : 'nebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'nebindingseq) in
    Obj.repr(
# 302 "piparser.mly"
        ( _2 )
# 1123 "piparser.ml"
               : 'optbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 304 "piparser.mly"
        ( [] )
# 1129 "piparser.ml"
               : 'optbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gtermseq) in
    Obj.repr(
# 308 "piparser.mly"
 ( PGSimpleFact(_1,_3), parse_extent() )
# 1137 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 310 "piparser.mly"
        ( PGNeq(_1,_3), parse_extent() )
# 1145 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gterm) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 312 "piparser.mly"
        ( PGEqual(_1, _3), parse_extent() )
# 1153 "piparser.ml"
               : 'gfact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'gfact) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 316 "piparser.mly"
    ( (_1,_2) )
# 1161 "piparser.ml"
               : 'event))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'query) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'queryseq) in
    Obj.repr(
# 320 "piparser.mly"
    ( _1 :: _3 )
# 1169 "piparser.ml"
               : 'queryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'query) in
    Obj.repr(
# 322 "piparser.mly"
    ( [_1] )
# 1176 "piparser.ml"
               : 'queryseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'event) in
    Obj.repr(
# 326 "piparser.mly"
    ( PRealQuery(PBefore(_1, PFalse)) )
# 1183 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'realquery) in
    Obj.repr(
# 328 "piparser.mly"
    ( PRealQuery(_1) )
# 1190 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'neidentseq) in
    Obj.repr(
# 330 "piparser.mly"
    ( PPutBegin(_2, _4) )
# 1198 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gterm) in
    Obj.repr(
# 332 "piparser.mly"
    ( PBinding(_2,_4) )
# 1206 "piparser.ml"
               : 'query))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'event) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 337 "piparser.mly"
    ( PBefore(_1, _3) )
# 1214 "piparser.ml"
               : 'realquery))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'hyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 341 "piparser.mly"
    ( POr(_1, _3) )
# 1222 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'hyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'hyp) in
    Obj.repr(
# 343 "piparser.mly"
    ( PAnd(_1, _3) )
# 1230 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'hyp) in
    Obj.repr(
# 345 "piparser.mly"
    ( _2 )
# 1237 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'event) in
    Obj.repr(
# 347 "piparser.mly"
    ( PQEvent(_1) )
# 1244 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'realquery) in
    Obj.repr(
# 349 "piparser.mly"
    ( PNestedQuery(_2) )
# 1251 "piparser.ml"
               : 'hyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 355 "piparser.mly"
 ( PFGFunApp (_1, _3), parse_extent() )
# 1259 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 357 "piparser.mly"
 ( PFGIdent (_1), parse_extent() )
# 1266 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    Obj.repr(
# 359 "piparser.mly"
 ( PFGTuple (_2), parse_extent() )
# 1273 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'fbindingseq) in
    Obj.repr(
# 361 "piparser.mly"
        ( PFGName (_1, _3), parse_extent() )
# 1281 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 363 "piparser.mly"
        ( PFGAny (_2), parse_extent() )
# 1288 "piparser.ml"
               : 'gformat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 367 "piparser.mly"
 ( _1 :: _3 )
# 1296 "piparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 369 "piparser.mly"
 ( [_1] )
# 1303 "piparser.ml"
               : 'negformatseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'negformatseq) in
    Obj.repr(
# 373 "piparser.mly"
        ( _1 )
# 1310 "piparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 375 "piparser.mly"
        ( [] )
# 1316 "piparser.ml"
               : 'gformatseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 380 "piparser.mly"
        ( (("!" ^ (string_of_int (_2)), parse_extent()), _4) :: _6 )
# 1325 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 382 "piparser.mly"
        ( [(("!" ^ (string_of_int (_2)), parse_extent()), _4)] )
# 1333 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 384 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1342 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 386 "piparser.mly"
        ( [(_1, _3)] )
# 1350 "piparser.ml"
               : 'fnesbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fnesbindingseq) in
    Obj.repr(
# 390 "piparser.mly"
        ( _1 )
# 1357 "piparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 392 "piparser.mly"
        ( [] )
# 1363 "piparser.ml"
               : 'fbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'gformat) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'fnebindingseq) in
    Obj.repr(
# 396 "piparser.mly"
        ( (_1, _3) :: _5 )
# 1372 "piparser.ml"
               : 'fnebindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'gformat) in
    Obj.repr(
# 398 "piparser.mly"
        ( [(_1, _3)] )
# 1380 "piparser.ml"
               : 'fnebindingseq))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fnebindingseq) in
    Obj.repr(
# 402 "piparser.mly"
        ( _2 )
# 1387 "piparser.ml"
               : 'foptbindingseq))
; (fun __caml_parser_env ->
    Obj.repr(
# 404 "piparser.mly"
        ( [] )
# 1393 "piparser.ml"
               : 'foptbindingseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'gformatseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'optphase) in
    Obj.repr(
# 408 "piparser.mly"
    ( (_1,_3,_4) )
# 1402 "piparser.ml"
               : 'gfactformat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 414 "piparser.mly"
    ( _2 )
# 1409 "piparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    Obj.repr(
# 416 "piparser.mly"
    ( -1 )
# 1415 "piparser.ml"
               : 'optphase))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 422 "piparser.mly"
    ( _2 )
# 1422 "piparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    Obj.repr(
# 424 "piparser.mly"
    ( -1 )
# 1428 "piparser.ml"
               : 'optint))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'termseq) in
    Obj.repr(
# 430 "piparser.mly"
 ( PSimpleFact(_1,_3), parse_extent() )
# 1436 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 432 "piparser.mly"
        ( PSNeq(_1,_3), parse_extent() )
# 1444 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 434 "piparser.mly"
        ( PSEqual(_1, _3), parse_extent() )
# 1452 "piparser.ml"
               : 'fact))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'factand) in
    Obj.repr(
# 438 "piparser.mly"
 ( _1 :: _3 )
# 1460 "piparser.ml"
               : 'factand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 440 "piparser.mly"
 ( [_1] )
# 1467 "piparser.ml"
               : 'factand))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 444 "piparser.mly"
        ( PClause(_1,_3) )
# 1475 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 446 "piparser.mly"
        ( PClause([],_1) )
# 1482 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 448 "piparser.mly"
        ( PEquiv(_1,_3,true) )
# 1490 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'factand) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'fact) in
    Obj.repr(
# 450 "piparser.mly"
        ( PEquiv(_1,_3,false) )
# 1498 "piparser.ml"
               : 'clause))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'clause) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'varmayfail) in
    Obj.repr(
# 454 "piparser.mly"
        ( (_1,_3) )
# 1506 "piparser.ml"
               : 'clausemayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'clause) in
    Obj.repr(
# 456 "piparser.mly"
        ( (_1,[]) )
# 1513 "piparser.ml"
               : 'clausemayfail))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'clausemayfail) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'clauses) in
    Obj.repr(
# 460 "piparser.mly"
 ( _1 :: _3 )
# 1521 "piparser.ml"
               : 'clauses))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'clausemayfail) in
    Obj.repr(
# 462 "piparser.mly"
 ( [_1] )
# 1528 "piparser.ml"
               : 'clauses))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'process) in
    Obj.repr(
# 468 "piparser.mly"
 ( _2 )
# 1535 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 470 "piparser.mly"
 ( PLetDef _1 )
# 1542 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 472 "piparser.mly"
 ( PRepl _2 )
# 1549 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 474 "piparser.mly"
 ( let x = _1 in
	  if x = 0 then PNil else 
          input_error ("The only integer in a process is 0 for the nil process") (parse_extent()) )
# 1558 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 478 "piparser.mly"
 ( PRestr(_2, _3) )
# 1566 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 480 "piparser.mly"
 ( PTest(_2,_4,_6) )
# 1575 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 482 "piparser.mly"
 ( PTest(_2,_4,PNil) )
# 1583 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 484 "piparser.mly"
 ( PInput(_3,_5,_7) )
# 1592 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 486 "piparser.mly"
 ( POutput(_3,_5,_7) )
# 1601 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 488 "piparser.mly"
 ( PLet(_2,_4,_6,PNil) )
# 1610 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'pattern) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'term) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 490 "piparser.mly"
 ( PLet(_2,_4,_6,_8) )
# 1620 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'fact) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 492 "piparser.mly"
        ( PLetFilter(_2,_4,_6,PNil) )
# 1629 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'neidentseq) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'fact) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 494 "piparser.mly"
        ( (* Approximating the else clause with a parallel composition
	     is not correct for trace reconstruction *)
          PLetFilter(_2,_4,_6,_8) )
# 1641 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'process) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 498 "piparser.mly"
 ( PPar(_1,_3) )
# 1649 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Piptree.ident) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'termseq) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 500 "piparser.mly"
        ( PEvent(_2, _4, _6) )
# 1658 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 502 "piparser.mly"
        ( if (_2) <= 0 then
	    input_error "Phases should be positive integers in processes" (parse_extent());
          PPhase(_2, _3) )
# 1668 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 506 "piparser.mly"
        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, None, _3) )
# 1679 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Piptree.ident) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'optprocess) in
    Obj.repr(
# 511 "piparser.mly"
        ( if (_2) <= 0 then
	    input_error "Sync numbers should be positive integers" (parse_extent());
          Param.has_barrier := true;
	  PBarrier(_2, Some _4, _6) )
# 1691 "piparser.ml"
               : 'process))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'process) in
    Obj.repr(
# 518 "piparser.mly"
        ( _2 )
# 1698 "piparser.ml"
               : 'optprocess))
; (fun __caml_parser_env ->
    Obj.repr(
# 520 "piparser.mly"
        ( PNil )
# 1704 "piparser.ml"
               : 'optprocess))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Piptree.ident) in
    Obj.repr(
# 524 "piparser.mly"
    ( PPatVar(_1) )
# 1711 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'patternseq) in
    Obj.repr(
# 526 "piparser.mly"
    ( PPatTuple(_2) )
# 1718 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Piptree.ident) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'patternseq) in
    Obj.repr(
# 528 "piparser.mly"
    ( PPatFunApp(_1,_3) )
# 1726 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 530 "piparser.mly"
    ( PPatEqual(_2) )
# 1733 "piparser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'patternseq) in
    Obj.repr(
# 534 "piparser.mly"
    ( _1 :: _3 )
# 1741 "piparser.ml"
               : 'patternseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 536 "piparser.mly"
    ( [_1] )
# 1748 "piparser.ml"
               : 'patternseq))
(* Entry all *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let all (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Piptree.decl list * Piptree.process)
