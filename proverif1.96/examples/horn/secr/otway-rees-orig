(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2016                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
(* Otway Rees protocol.
   Version of Otway Rees, Operating Systems Review Vol 21 no 1, p 8-10, 1987 *)

pred c/1 decompData, elimVar.

fun host/1.

fun encrypt/2.

not c:shrA[].
not c:shrB[].

query c:secretA[].
query c:secretB[].

reduc

(* attacker *)
c:encrypt(m,k) & c:k -> c:m;
c:x & c:y -> c:encrypt(x,y);
c:host(x);

(* A *)

c:X -> c:(C[X],host(shrA[]),X, encrypt((Na[X], C[X], host(shrA[]), X), shrA[]));

c:(C[host(shrB[])], encrypt((Na[host(shrB[])],key), shrA[])) -> c:encrypt(secretA[], key);

(* B *)

c:(x,y,host(shrB[]),z) -> c:(x,y,host(shrB[]),z,encrypt((Nb[y],x,y,host(shrB[])), shrB[]));

c:(x,y,host(shrB[]),z) & c:(x,y2,encrypt((Nb[y], key), shrB[])) -> c:(x,y2);

c:(x,host(shrA[]),host(shrB[]),z) & c:(x,y2,encrypt((Nb[host(shrA[])],key), shrB[])) -> c:encrypt(secretB[], key);

(* Server *)

c:(c,host(shra), host(shrb), encrypt((na, c, host(shra), host(shrb)), shra),
   encrypt((nb, c, host(shra),host(shrb)), shrb)) ->
c:(c,encrypt((na, k[c,shra,shrb]), shra),encrypt((nb,k[c,shra,shrb]), shrb)).

