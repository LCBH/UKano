(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2016                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
(* Simpler Yahalom protocol
Version of Burrows, Abadi, Needham, SRC039

Message 1 A -> B: A; Na 
Message 2 B -> S: B; Nb; {A; Na}Kbs 
Message 3 S -> A: Nb; {B; Kab; Na}Kas ; {A; Kab; Nb}Kbs 
Message 4 A -> B: {A; Kab; Nb}Kbs ; {Nb}Kab

*)

pred c/1 elimVar, decompData.

fun encrypt/2.
fun host/1.

query c:secretA[].
query c:secretB[].

not c:Kas[].

reduc

(* attacker *)

c:c[];
c:k -> c:host(k);
c:k & c:m -> c:encrypt(m,k);
c:k & c:encrypt(m,k) -> c:m;

(* A *)

c:(host(Kas[]), Na[]);
c:(nb, encrypt((b, k, Na[]), Kas[]), mb) -> c:(mb, encrypt(nb, k));
c:(nb, encrypt((host(Kas[]), k, Na[]), Kas[]), mb) -> c:encrypt(secretA[], k);

(* B *)

c:(a, na) -> c:(host(Kas[]), Nb[a, na], encrypt((a, na), Kas[]));
c:(encrypt((host(Kas[]), k, Nb[host(Kas[]), na]), Kas[]), encrypt(Nb[host(Kas[]), na], k)) -> c:encrypt(secretB[], k);

(* S *)

c:(host(kbs), nb, encrypt((host(kas), na), kbs)) -> c:(nb, encrypt((host(kbs), k[kas, kbs, na, nb], na), kas), encrypt((host(kas),  k[kas, kbs, na, nb], nb), kbs)).
