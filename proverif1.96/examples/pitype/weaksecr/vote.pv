(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2016                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
(* Naive vote protocol
   Taken from Delaune, Jacquemard, CSFW'04 *)

type pkey.
type skey.

(* deterministic public key encryption *)

fun pk(skey): pkey.
fun encrypt(bitstring, pkey): bitstring.
reduc forall x: bitstring, y: skey; decrypt(encrypt(x,pk(y)), y) = x.

(* Note that the attack disappears with probabilistic public-key encryption:

type seed.
fun pk(skey): pkey.
fun internal_encrypt(bitstring, pkey, seed): bitstring.
reduc forall x: bitstring, y: skey, r: seed; decrypt(internal_encrypt(x,pk(y),r), y) = x.
letfun encrypt(x: bitstring, y: pkey) = new r: seed; internal_encrypt(x,y,r).

*)

free c: channel.
free v: bitstring [private].

weaksecret v.


process 
	new skS: skey;
	let pkS = pk(skS) in
	out(c, pkS);
	!out(c, encrypt(v, pkS))
