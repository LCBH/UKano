(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2016                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
(* Handshake protocol.
   From Delaune, Jacquemard, CSFW'04
*)

type passwd.
type nonce.

(* shared-key encryption as equation *)

fun encrypt(nonce, passwd): nonce.
fun decrypt(nonce, passwd): nonce.
equation forall x: nonce, y: passwd; decrypt(encrypt(x,y),y) = x.
equation forall x: nonce, y: passwd; encrypt(decrypt(x,y),y) = x.

(* addition of one *)

fun incr(nonce): nonce.

free c: channel.
free pw: passwd [private].
weaksecret pw.

let processA = 
	new N: nonce;
	out(c, encrypt(N, pw)).

let processB = 
	in(c, x: nonce);
	let n = decrypt(x, pw) in
	out(c, encrypt(incr(n), pw)).
    
process
	(!processA)
	|
	(!processB)
