(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2016                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
(* Denning-Sacco *)

free c.

(* Probabilistic public key cryptography *)

fun pk/1.
fun encrypt/3.
reduc decrypt(encrypt(x,pk(y),r),y) = x.

(* Signatures *)

fun sign/2.
reduc getmess(sign(m,k)) = m.
reduc checksign(sign(m,k), pk(k)) = m.

(* Probabilistic Shared-key cryptography *)

fun sencrypt/3.
reduc sdecrypt(sencrypt(x,y,r),y) = x.

data secrcst/0.

(* Secrecy assumptions *)

not skA.
not skB.

data ok/0.
data error/0.
free n2.

private free secretA1, secretA2, secretB.
noninterf secretA1 among (ok, n2), secretA2 among (error, n2).

let processA =
	in(c, pk2);
	new k; new r;
	out(c, (encrypt(sign((pkA, pk2, k), skA), pk2, r)));
	if pk2 = pkB then
	in(c, m);
        let (=secrcst, s) = sdecrypt(m,k) in 
 	(
	new r2;
	out(c, sencrypt(secretA1, k, r2)) (* secretA1 takes values "ok" or n2 *)
	)
	else
	(
	new r3;
	out(c, sencrypt(secretA2, k, r3)) (* secretA2 takes values "error" or n2 *)
	).

let processB =
	in(c, km);
	let ks = decrypt(km,skB) in
	let (=pkA, =pkB, k) = checksign(ks, pkA) in
	new r;
	out(c, sencrypt((secrcst, secretB), k, r)).

process new skA; 
	let pkA = pk(skA) in
        out(c, pkA);
        new skB; 
	let pkB = pk(skB) in
        out(c, pkB);
	((!processA) | (!processB))
