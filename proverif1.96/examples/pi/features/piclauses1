(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2016                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
free c.

(* signatures *)

fun sign/2.
fun pk/1.
reduc checksign(sign(m,k),pk(k)) = m.

data cons/2.

(* Clauses *)

pred member/2 memberOptim.

clauses

member:x,cons(x,l);
member:x,l -> member:x,cons(y,l).


private free secretA, secretB.
query secretA.
query secretB.

let processA = 
	in(c, x);
	let y suchthat member:y,x in
	let =pkA = checksign(y, pkB) in
	out(c, sign(x,skA)).

let processB = 
	out(c, sign(pkA, skB));
	in(c,x);
	let z = checksign(x,pkA) in
	out(c, secretB).

process new skA; new skB;
	let pkA = pk(skA) in 
	let pkB = pk(skB) in
	out(c, pkA); out(c, pkB);
	((!processA) | (!processB))
