(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2016                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
(* Denning-Sacco *)

free c.

(* Public key cryptography *)

fun pk/1.
fun encrypt/2.
reduc decrypt(encrypt(x,pk(y)),y) = x.

(* Signatures *)

fun sign/2.
reduc getmess(sign(m,k)) = m.
reduc checksign(sign(m,k), pk(k)) = m.

(* Host name / key
   The server has a table (host name, public key), which we
   represent by the function getkey. *)

fun host/1.
private reduc getkey(host(x)) = x.

(* Shared-key cryptography *)

fun sencrypt/2.
reduc sdecrypt(sencrypt(x,y),y) = x.

(* Secrecy assumptions *)

not skA.
not skB.
not skS.

private free secretA, secretB.
query attacker:secretA;
      attacker:secretB.
query evinj:endBparam(x,y) ==> evinj:beginBparam(x,y).
query evinj:endBkey(x,y,z) ==> evinj:beginBkey(x,y,z).

data c0/0.
data c1/0.
data c2/0.
data c3/0.

let processA =
	in(c, (cert1, cert2));
	let (=c0, =hostA, =pkA) = checksign(cert1, pkS) in
	let (=c1, h2, pk2) = checksign(cert2, pkS) in
	event beginBparam(hostA, h2);
	new k;
	event beginBkey(hostA, h2, k);
	out(c, (cert1, cert2, encrypt((c2, sign((c3, k), skA)), pk2)));
	if h2 = hostB then
	out(c, sencrypt(secretA, k)).

let processB =
	in(c, (cert1, cert2, km));
	let (=c0, h1, pk1) = checksign(cert1, pkS) in
	let (=c1, =hostB, =pkB) = checksign(cert2, pkS) in
	let (=c2, ks) = decrypt(km,skB) in
	let (=c3, k) = checksign(ks, pk1) in
	if h1 = hostA then
	event endBparam(h1, hostB);
	event endBkey(h1, hostB, k);
	out(c, sencrypt(secretB, k)).

let processS =
	in(c, (h1,h2));
	let s1 = getkey(h1) in
	let s2 = getkey(h2) in
	out(c, (sign((c0, h1, s1), skS), sign((c1, h2, s2), skS))).

process new skA; 
	let pkA = pk(skA) in
        out(c, pkA);
        new skB; 
	let pkB = pk(skB) in
        out(c, pkB);
	new skS; 
	let pkS = pk(skS) in
	out(c, pkS);
	let hostA = host(pkA) in
	out(c, hostA);
	let hostB = host(pkB) in
	out(c, hostB);
	((!processA) | (!processB) | (!processS))
