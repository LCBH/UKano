(*************************************************************
 *                                                           *
 *  Cryptographic protocol verifier                          *
 *                                                           *
 *  Bruno Blanchet, Vincent Cheval, and Marc Sylvestre       *
 *                                                           *
 *  Copyright (C) INRIA, CNRS 2000-2016                      *
 *                                                           *
 *************************************************************)

(*

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details (in file LICENSE).

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
free c.
(* 

Message 1: A -> B : { Na, A }pkB
Message 2: B -> A : { Na, Nb }pkA
Message 3: A -> B : { Nb }pkB

*)

(* Public key cryptography *)

fun pk/1.
fun encrypt/2.
reduc decrypt(encrypt(x,pk(y)),y) = x.

(* Host names
   The server has a table (host name, public key), which we
   represent by the function getkey. *)

fun host/1.
private reduc getkey(host(x)) = x.

(* Signatures *)

fun sign/2.
reduc checksign(sign(x,y),pk(y)) = x.
reduc getmess(sign(x,y)) = x.

(* Shared-key cryptography *)

fun sencrypt/2.
reduc sdecrypt(sencrypt(x,y),y) = x.

(* Secrecy assumptions *)

not skA.
not skB.
not skS.

private free secretANa, secretANb, secretBNa, secretBNb.
query attacker:secretANa;
      attacker:secretANb;
      attacker:secretBNa;
      attacker:secretBNb.
query evinj:endBparam(x) ==> evinj:beginBparam(x).
query evinj:endBfull(x1,x2,x3,x4,x5,x6) ==> evinj:beginBfull(x1,x2,x3,x4,x5,x6).
query evinj:endAparam(x) ==> evinj:beginAparam(x).
query evinj:endAfull(x1,x2,x3,x4,x5,x6) ==> evinj:beginAfull(x1,x2,x3,x4,x5,x6).

data c0/0.
data c1/0.
data c2/0.
data c3/0.

let processA =  
	(* Choose the other host *)
	in(c,hostX); 
	event beginBparam(hostX); 
	(* Get the public key certificate for the other host *)
	out(c, (hostA, hostX));
	in(c, ms); 
	let (=c0,pkX,=hostX) = checksign(ms,pkS) in
        (* Message 1 *)
	new Na; 
        out(c, encrypt((c1, Na, hostA), pkX));
        (* Message 2 *)
        in(c, m); 
	let (=c2, =Na, NX2) = decrypt(m, skA) in
	event beginBfull(Na, hostA, hostX, pkX, pkA, NX2);
        (* Message 3 *)
        out(c, encrypt((c3, NX2), pkX));
        (* OK *)
	if hostX = hostB then
	event endAparam(hostA);
	event endAfull(Na, hostA, hostX, pkX, pkA, NX2);
	out(c, sencrypt(secretANa, Na));
	out(c, sencrypt(secretANb, NX2)).

let processB = 
        (* Message 1 *)
	in(c, m);
	let (=c1, NY, hostY) = decrypt(m, skB) in
	event beginAparam(hostY);
	(* Get the public key certificate for the other host *)
        out(c, (hostB, hostY));
	in(c,ms);
        let (=c0,pkY,=hostY) = checksign(ms,pkS) in
        (* Message 2 *)
	new Nb;
	event beginAfull(NY, hostY, hostB, pkB, pkY, Nb);
        (* Message 3 *)
	out(c, encrypt((c2, NY, Nb), pkY));
	in(c, m3);
        if (c3, Nb) = decrypt(m3, skB) then
	(* OK *)
        if hostY = hostA then
	event endBparam(hostB);
	event endBfull(NY, hostY, hostB, pkB, pkA, Nb);
	out(c, sencrypt(secretBNa, NY));
	out(c, sencrypt(secretBNb, Nb)).

let processS =  in(c,m); 
	        let (a,b) = m in
		let sb = getkey(b) in
                out(c,sign((c0, sb, b),skS)).

process new skA; let pkA = pk(skA) in
        out(c, pkA);
        new skB; let pkB = pk(skB) in
        out(c, pkB);
	new skS; let pkS = pk(skS) in
	out(c, pkS);
	let hostA = host(pkA) in
	out(c, hostA);
	let hostB = host(pkB) in
	out(c, hostB);
	((!processA) | (!processB) | (!processS))
