diff --git a/proverif2.01/src/param.ml b/proverif2.01/src/param.ml
index f8e626f..689435d 100644
--- a/proverif2.01/src/param.ml
+++ b/proverif2.01/src/param.ml
@@ -487,6 +487,17 @@ let dummy_solve_status =
 type nounif_ignore_once_t = NIO_None | NIO_Auto | NIO_All
 let nounif_ignore_once = ref NIO_None
 
+let biproj_fun_memo side = memo (fun t ->
+  { f_name = Fixed ("biproj_" ^ (if side = Left then "fst" else "snd")) ;
+    f_type = [t],t;
+    f_cat = BiProj side;
+    f_initial_cat = BiProj side;
+    f_private = true;
+    f_options = 0 })
+
+let biproj_fun side t =
+  biproj_fun_memo side (get_type t)
+
 (* Values computed from the input file *)
 
 let types_initial = [channel_type; bitstring_type; bool_type; nat_type]
diff --git a/proverif2.01/src/param.mli b/proverif2.01/src/param.mli
index dbd15d7..d84129e 100644
--- a/proverif2.01/src/param.mli
+++ b/proverif2.01/src/param.mli
@@ -263,6 +263,10 @@ val dummy_solve_status : Pitypes.t_solve_corresp_status
 type nounif_ignore_once_t = NIO_None | NIO_Auto | NIO_All
 val nounif_ignore_once : nounif_ignore_once_t ref
 
+val biproj_fun : Types.side -> Types.typet -> Types.funsymb
+
+val biproj_fun : Types.side -> Types.typet -> Types.funsymb
+
 (* Values computed from the input file *)
 
 val types_initial : Types.typet list
diff --git a/proverif2.01/src/pitranslweak.ml b/proverif2.01/src/pitranslweak.ml
index 51e03e8..f537965 100644
--- a/proverif2.01/src/pitranslweak.ml
+++ b/proverif2.01/src/pitranslweak.ml
@@ -313,6 +313,15 @@ let rec transl_term next_f cur_state term = match term with
 		  ) cur_state t1
 		| _ -> Parsing_helper.internal_error "Choice should have two arguments"
 	    end
+        | BiProj side ->
+            begin match args with
+              | [t] ->
+                  transl_term (fun cur_state1 t1 t2 ->
+                    let t = match side with Left -> t1 | Right -> t2 in
+                      next_f cur_state1 t t
+                  ) cur_state t
+              | _ -> assert false
+            end
 	| Failure -> next_f cur_state (FunApp(f,[]))  (FunApp(f,[]))
 
 	| _ ->
diff --git a/proverif2.01/src/pitsyntax.ml b/proverif2.01/src/pitsyntax.ml
index c7fc97a..7749969 100644
--- a/proverif2.01/src/pitsyntax.ml
+++ b/proverif2.01/src/pitsyntax.ml
@@ -88,6 +88,10 @@ let get_apply_symb env (s,ext) tl =
         input_error ("function " ^ s ^ " expects two arguments of same type but is here given " ^
           (args_to_string tl)) ext;
       (EFun (Param.choice_fun t1), t1)
+  | "biproj_fst", [t] ->
+      (EFun (Param.biproj_fun Left t), t)
+  | "biproj_snd", [t] ->
+      (EFun (Param.biproj_fun Right t), t)
   | ("=" | "<>" | "choice"), _ ->
       input_error (s ^ "expects two arguments") ext
   | str,[t] when str.[0] = '-' ->
diff --git a/proverif2.01/src/reduction_bipro.ml b/proverif2.01/src/reduction_bipro.ml
index 3d95264..00a6f1e 100644
--- a/proverif2.01/src/reduction_bipro.ml
+++ b/proverif2.01/src/reduction_bipro.ml
@@ -340,6 +340,10 @@ let rec term_evaluation side = function
 		  term_evaluation side t2
 	    | _ -> Parsing_helper.internal_error "Choice should have two arguments"
 	  end
+      | BiProj Left ->
+          begin match l with [t] -> term_evaluation 1 t | _ -> assert false end
+      | BiProj Right ->
+          begin match l with [t] -> term_evaluation 2 t | _ -> assert false end
       | Red redl ->
 	  let l' = List.map (term_evaluation side) l in
 	  let rec try_red_list = function
diff --git a/proverif2.01/src/simplify.ml b/proverif2.01/src/simplify.ml
index 668cc1d..537a280 100644
--- a/proverif2.01/src/simplify.ml
+++ b/proverif2.01/src/simplify.ml
@@ -656,8 +656,12 @@ let rec fst_snd_term next_f = function
       fst_snd_term (fun t11 t12 ->
         fst_snd_term (fun t21 t22 ->
           next_f t11 t22
-        ) t2
-      ) t1
+          ) t2
+        ) t1
+  | FunApp({f_cat = BiProj s},[t]) ->
+     fst_snd_term (fun t1 t2 ->
+         let t' = match s with Left -> t1 | Right -> t2 in
+         next_f t' t') t    
   | FunApp(f,args) ->
       fst_snd_term_list (fun q1 q2 ->
         next_f (FunApp(f,q1)) (FunApp(f,q2))
diff --git a/proverif2.01/src/types.mli b/proverif2.01/src/types.mli
index e225051..0847d53 100644
--- a/proverif2.01/src/types.mli
+++ b/proverif2.01/src/types.mli
@@ -152,7 +152,10 @@ and funcats =
   | General_var
   | General_mayfail_var
   | Choice
+  | BiProj of side
   | Failure
+  
+and side = Left | Right
 
 (* The following constraints represents the constraints that can occur in a clause,
   namely disequalties between terms, inequalities between natural numbers and
diff --git a/src/display.ml b/src/display.ml
index 5881076..09a7c20 100644
--- a/src/display.ml
+++ b/src/display.ml
@@ -1245,7 +1245,12 @@ and display_term_list2 l = display_list display_term2 "," l
 and isChoice funSymb = funSymb.f_name = "choice"
 
 and display_pattern_choice = function
-  | PatVar b -> display_idcl CVar (varname b)
+  | PatVar b -> display_idcl CVar (varname b);
+                if !Param.typed_frontend then
+	          begin
+	            print_string ": ";
+	            display_idcl CType "bitstring" (* TODO: check if this could be checked beforehand *)
+	          end;
   | PatTuple (f,l) -> 
       display_idcl CFun f.f_name;
       if (l != []) || (f.f_name = "") || not (!Param.typed_frontend) then
@@ -1281,11 +1286,6 @@ let rec display_pattern = function
 	  print_string "[";
 	  display_pattern_list_choice l;
 	  print_string "]";
-	  if !Param.typed_frontend then
-	    begin
-	      print_string ": ";
-	      display_idcl CType "bitstring" (* TODO: check if this could be checked beforehand *)
-	    end;
 	end
   | PatTuple (f,l) -> 
       display_idcl CFun f.f_name;
diff --git a/proverif2.01/src/pitparser.mly b/proverif2.01/src/pitparser.mly
index 315638d..d43e4b2 100644
--- a/proverif2.01/src/pitparser.mly
+++ b/proverif2.01/src/pitparser.mly
@@ -33,6 +33,13 @@ open Parsing_helper
 open Ptree
 open Pitptree
 
+let fresh_biproj_var =
+  let c = ref 0 in
+    fun () ->
+      incr c ;
+      Printf.sprintf "_biproj_%d" !c,
+      Parsing_helper.dummy_ext
+
 let zero () = PIdent (("0",parse_extent())), parse_extent()
 
 let rec unfold_int t = function
@@ -67,6 +74,13 @@ let rec unfold_pat_int t = function
 
 exception Syntax
 
+let fresh_biproj_var =
+  let c = ref 0 in
+    fun () ->
+      incr c ;
+      Printf.sprintf "_biproj_%d" !c,
+      Parsing_helper.dummy_ext
+
 %}
 
 %token CHOICE
@@ -880,6 +894,28 @@ tprocess:
 	{ PTest($2,$4,$5), parse_extent() }
 |	IN LPAREN pterm COMMA tpattern RPAREN options opttprocess
 	{ PInput($3,$5,$8,$7), parse_extent() }
+|	IN LPAREN pterm COMMA CHOICE LBRACKET IDENT COLON typeid COMMA IDENT COLON typeid RBRACKET  RPAREN options opttprocess
+	{ let z = fresh_biproj_var () in
+        PInput($3,PPatVar (z,Some $9),
+        (let z : Pitptree.pterm_e = PPIdent (fst z,snd z), parse_extent () in
+        let fst : ident = ("biproj_fst",parse_extent ()) in
+        let snd : ident = ("biproj_snd",parse_extent ()) in
+        PLet (PPatVar ($7,None),
+	       (PPFunApp(fst,[z]),parse_extent ()),
+               (PLet
+ 		  (PPatVar
+		     ($11,None),
+		     (PPFunApp(snd,[z]),parse_extent ()),
+		     $17,
+		     (PNil,parse_extent())
+		  ),
+		  parse_extent()
+	       ),
+	       (PNil,parse_extent())
+	      ), parse_extent()
+	),
+        $16),
+	parse_extent() }
 |	OUT LPAREN pterm COMMA pterm RPAREN progend opttprocess
 	{ POutput($3,$5,$8), parse_extent() }
 | 	LET tpattern EQUAL pterm
