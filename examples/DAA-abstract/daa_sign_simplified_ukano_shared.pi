(* MINIMAL SIMPLIFIED VERSION FOF DAA SIGN, variant (Example 11) (i.e., sKI is an identity parameter)
 * MODIFIED TO TEST A STRONG DEF OF UK using UKANO 
 * Lucca Hirschi
 * 01/10/2018
 *)

(* REMARKS:
todo Verified in 8sec for FO and 0.1s for WA.
*)

(*  SIMPLIFIED VERSION OF DAA SIGN ADAPTED FROM:
	This script supports the following article:

		Smyth, B., Ryan, M., & Chen, L. (2012) Formal analysis of anonymity in Direct Anonymous Attestation schemes.

	The script models the fixed RSA-based Direct Anonymous Attestation process specification <Join_RSA', Sign_RSA'>.

	RESULT: Observational equivalence succeeds
	EXECUTION TIME: 26 seconds 
	PROVERIF VERSION: 1.86pl3
	MACHINE SPEC: CentOS 5.7 on 2.40GHz Intel Xeon with 4GB memory (19 September 2012) 

	NOTE: The execution time increases to 7 minutes 42 seconds without the ProVerif parameter selFun = Term.
*)
(***************)
(* ==THEORY==  *)
(***************)
free c:channel.

fun accept() : bitstring.

(* Signature *)
fun spk(bitstring) : bitstring.
fun sign (bitstring, bitstring) : bitstring.
reduc forall m: bitstring , k:bitstring ;
  getmess(sign(m, k)) = m.
reduc forall m: bitstring , k:bitstring ;
  checksign(sign(m, k), spk(k)) = m.

(* Zero-Knowledge proofs *)
fun ZK (bitstring, bitstring) : bitstring.
fun acceptZK() : bitstring.
reduc forall Ktpm: bitstring , id:bitstring, kI:bitstring, nV:bitstring, nt:bitstring, m:bitstring;
  checkZK(ZK( (sign((Ktpm,id),kI),Ktpm),
              (nV,nt,m,spk(kI))
	  )) = acceptZK.
reduc forall Ktpm: bitstring , id:bitstring, kI:bitstring, nV:bitstring, nt:bitstring, m:bitstring;
  publicZK(ZK( (sign((Ktpm,id),kI),Ktpm),
              (nV,nt,m,spk(kI))
	  )) = (nV,nt,m,spk(kI)).

(* constant used by UKano *)
fun hole() :bitstring.

(****************)
(* ==PROTOCOL== *)
(****************)

let SignerP(cred:bitstring, Ktpm:bitstring, skI:bitstring) =
(* args:    credential,     TPM's secret key, issuer's public key *)
    new m: bitstring; (* the message TPM is willing to sign m with cred *)
    in(c, x:bitstring);
    let (nv:bitstring,xpkI:bitstring) = x in
    if xpkI = spk(skI) then  (* safe test *)
    new nt: bitstring;
    new newKtpm:bitstring;
    new newIDtpm:bitstring;
    out(c, ZK( (cred,Ktpm),
               (nv,nt,m,spk(skI))
             )).
(* The following idealization is not conform:
   		  ZK( (sign((newKtpm,newIDtpm), skI), newKtpm),
		      (nv,nt,m,spk(skI))
		    )
*)
(* Danity check:  out(c, Ktpm).*)

let VerifierP(pkI:bitstring) =
(* args:      issuer's public key *)
    new nv :bitstring;
    out(c,(nv,pkI));  (* Verifier sends pkI so that attacker gets the isser's public key *)
    in(c, xZK:bitstring);
(* Verify ZK bounds nv (of that session) and contains credential of issuer I*)
    let (=nv, nt:bitstring, xmsg:bitstring, =pkI) = publicZK(xZK) in
(* Verify ZK *)
    let (=acceptZK) = checkZK(xZK) in
    out(c,accept).
  

let SYSTEM = 
! (* ID *)
 new Ktpm :bitstring;    (* TPM's secret internal key *)
 new IDtpm :bitstring;   (* TPM's identity *)
 new skI :bitstring;     (* Issuer's identity (as an identity parameter: case(b))*)
(* We model unbounded many issuers with unbounded many clients having credentials from pairwise different issuers.
   Anonymity set=all users.
*)
! (* SESSION *)
(
  SignerP(sign((Ktpm,IDtpm),skI), Ktpm, skI)
|
  VerifierP(spk(skI))
).

process SYSTEM