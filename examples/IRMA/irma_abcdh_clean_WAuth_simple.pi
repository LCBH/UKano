
(********   This file has been automatically generated using the tool UKano ********)
(********   except that we simplified queries to make ProVerif
            terminates sooner...                                            ********)

(* Scenario of ABCDH protocol as [2] using idemix primitives as specified in [1]
 * MINIMAL VERSION ABCDH
 * Lucca Hirschi
 * 29/03/2016
 * Status: Done & Works
 *)

(*
IDEMIX (from [1] A formal Model of Identity Mixer Mixer (Modersheim + IBM Zurich)
             [2] A secure channel for attribute-based credentials (Alpar, Hoepman (Netherlands)))
[1]
  - users that have each a master secret never revealed to other parties
  - users are known to organizations under pseudonyms bound to sessions
  - organizations make statements abouth users by issuing credentials bound to the master secret of that user
[2]
  - selective discolsure
    SD(O,Attr,R)   "I know a credential bounds to a MS I know that has been signed by O and asserting
                    that I have attribute Attre. This is bound to R".
*)
(* THEORY - INGREDIENTS
- Master Secret: Each user u has a master secret MS(u).
- Pseudonym: Each user u may generate a random R and use pseudonym pd(u,R).
- Commitments: commit(R,V) is comit of V with random V
- Credentials: basically a list of attributes signed by an issuing organization.
   We assume each orga sign a certain type of attribute and its public bitstrings are publicly known
   -> cred(sk(O),xU,Attr): credential for attribute Attr by orga O bound to master secret xu (of user u)
   Can be issued using some sk(O), and some commit(R,xu), A.
To simplify, we only consider attributes verification that are unary relations. For instance "over-18 years old".
This will be an attribute "isOver18".
For SD:
SD(cred(sk(O),xU,Attr),O, xU, R, Attr)
   check: if it has this form or this one (for SD(\emptyset;n)): SD(cred(sk(O),xU,Attr),empty, xU, R, empty)
   projection: of O, R and Attr (not from cred)
*)

(***************)
(* ==THEORY==  *)
(***************)

type b.
channel c.

fun MS(bitstring):bitstring [private].  (* Master secret of a user *)
fun sk(bitstring):bitstring [private].  (* Secret bitstring of an organization O *)
fun commit(bitstring,bitstring):bitstring.      (* commitments (public but no projection) *)
fun skS(bitstring):bitstring.           (* Secret bitstring of signature of credentials *)
fun cred(bitstring,bitstring,bitstring):bitstring.      (* credential (public, projection3) *)
fun SD(bitstring,bitstring,bitstring,bitstring,bitstring):bitstring.    (* Selective Disclosure *)

fun isOver18():bitstring.
fun movieTheater():bitstring.
fun requestIsOver18():bitstring.
fun empty():bitstring.
fun accept():bitstring.
fun OK():bitstring.
fun c1():bitstring.
fun c2():bitstring.
fun g():bitstring.

fun senc(bitstring,bitstring):bitstring.
fun exp(bitstring,bitstring) :bitstring.

(* Organizations *)
fun OrgaAge():bitstring.           (* new organization: can issue age info *)
fun OrgaCheckAge():bitstring.      (* new organization: can check age info *)


(* Random Oracles: free constructor symbols *)
fun f1(bitstring):bitstring.
fun f2(bitstring):bitstring.
fun f3(bitstring):bitstring.

(* Diffie-Hellman exponentiation *)
equation forall x :bitstring, y :bitstring;
  exp(exp(g,x),y) = exp(exp(g,y),x).
(* symmetric encryption *)
reduc forall m:bitstring, k:bitstring;
      sdec(senc(m, k), k) = m.
(* SD: Selective Disclosure *)
fun verifySD(bitstring):bitstring
reduc forall O:bitstring, U:bitstring, Attr:bitstring, R:bitstring;
	verifySD(SD(cred(skS(O), MS(U), Attr), O, MS(U), R, Attr)) = accept
otherwise forall O:bitstring, U:bitstring, Attr:bitstring, R:bitstring;
	verifySD(SD(cred(skS(O), MS(U), Attr), empty, MS(U), R, empty)) = accept.
reduc forall O:bitstring, xU:bitstring, Attr:bitstring, R:bitstring, O2:bitstring, Attr2:bitstring;
        getPublicSD(SD(cred(skS(O), xU, Attr), O2, xU, R, Attr2)) = (O2,R,Attr2).

(* For defining idealizations *)
free hole:bitstring.

(****************)
(*  *)


(* == DECLARATIONS OF EVENTS == *)
event Rin_1(bitstring,bitstring,bitstring).
event Rtest_1(bitstring,bitstring,bitstring).
event Rout_1(bitstring,bitstring,bitstring,bitstring).
event Rin_2(bitstring,bitstring,bitstring,bitstring,bitstring).
event Rtest_2(bitstring,bitstring,bitstring,bitstring,bitstring).
event Rout_2(bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event Rin_3(bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event Rtest_3(bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event Rout_3(bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event Iout_1(bitstring,bitstring,bitstring).
event Iin_1(bitstring,bitstring,bitstring,bitstring).
event Itest_1(bitstring,bitstring,bitstring,bitstring).
event Iout_2(bitstring,bitstring,bitstring,bitstring,bitstring).
event Iin_2(bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event Itest_2(bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event Iout_3(bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event Iin_3(bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event Itest_3(bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).
event Iout_4(bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring,bitstring).


(* == DECLARATIONS OF QUERIES == *)
query k1:bitstring, k2:bitstring, n1:bitstring, n2:bitstring,
      m1:bitstring, m2:bitstring;
   (event(Itest_1(k1,n1,m1,m2))  ==>
   (event(Iin_1(k1,n1,m1,m2))  ==>
   (event(Rout_1(k2,n2,m1,m2))  ==>
   (event(Rin_1(k2,n2,m1))  ==>
   (event(Iout_1(k1,n1,m1))))))).
query k1:bitstring, k2:bitstring, n1:bitstring, n2:bitstring,
      m1:bitstring, m2:bitstring, m3:bitstring, m4:bitstring;
   (event(Itest_2(k1,n1,m1,m2,m3,m4))  ==>
   (event(Iin_2(k1,n1,m1,m2,m3,m4))  ==>
   (event(Rout_2(k2,n2,m1,m2,m3,m4))  ==>
   (event(Rin_2(k2,n2,m1,m2,m3))  ==>
   (event(Iout_2(k1,n1,m1,m2,m3))  ==>
   (event(Iin_1(k1,n1,m1,m2))  ==>
   (event(Rout_1(k2,n2,m1,m2))  ==>
   (event(Rin_1(k2,n2,m1))  ==>
   (event(Iout_1(k1,n1,m1))))))))))).

query k1:bitstring, k2:bitstring, n1:bitstring, n2:bitstring,
      m1:bitstring, m2:bitstring, m3:bitstring, m4:bitstring, m5:bitstring, m6:bitstring;
   (event(Itest_3(k1,n1,m1,m2,m3,m4,m5,m6))  ==>
   (event(Iin_3(k1,n1,m1,m2,m3,m4,m5,m6))  ==>
   (event(Rout_3(k2,n2,m1,m2,m3,m4,m5,m6))  ==>
   (event(Rin_3(k2,n2,m1,m2,m3,m4,m5)))))).

(* The rest of the query (see below, is redundant with the query starting with Rtest_3
   Indeed, if Rin_3 and I_out3 are fired with those names then we're sure we can glue
   events given by the query Rtest_3 with this one.

   (event(Iout_3(k1,n1,m1,m2,m3,m4,m5)) ==>
   (event(Iin_2(k1,n1,m1,m2,m3,m4))  ==>
   (event(Rout_2(k2,n2,m1,m2,m3,m4)) ==>
   (event(Rin_2(k2,n2,m1,m2,m3))  ==>
   (event(Iout_2(k1,n1,m1,m2,m3))  ==>
   (event(Iin_1(k1,n1,m1,m2))  ==>
   (event(Rout_1(k2,n2,m1,m2))  ==>
   (event(Rin_1(k2,n2,m1))  ==>
   (event(Iout_1(k1,n1,m1))))))))))))))).
*)

query k1:bitstring, k2:bitstring, n1:bitstring, n2:bitstring,
      m1:bitstring;
   (event(Rtest_1(k2,n2,m1))  ==>
   (event(Rin_1(k2,n2,m1))  ==>
   (event(Iout_1(k1,n1,m1))))).
query k1:bitstring, k2:bitstring, n1:bitstring, n2:bitstring,
      m1:bitstring, m2:bitstring, m3:bitstring;
   (event(Rtest_2(k2,n2,m1,m2,m3))  ==>
   (event(Rin_2(k2,n2,m1,m2,m3))  ==>
   (event(Iout_2(k1,n1,m1,m2,m3))  ==>
   (event(Iin_1(k1,n1,m1,m2))  ==>
   (event(Rout_1(k2,n2,m1,m2))  ==>
   (event(Rin_1(k2,n2,m1))  ==>
   (event(Iout_1(k1,n1,m1))))))))).
query k1:bitstring, k2:bitstring, n1:bitstring, n2:bitstring,
      m1:bitstring, m2:bitstring, m3:bitstring, m4:bitstring, m5:bitstring;
   (event(Rtest_3(k2,n2,m1,m2,m3,m4,m5))  ==>
   (event(Rin_3(k2,n2,m1,m2,m3,m4,m5))  ==>
   (event(Iout_3(k1,n1,m1,m2,m3,m4,m5))  ==>
   (event(Iin_2(k1,n1,m1,m2,m3,m4))  ==>
   (event(Rout_2(k2,n2,m1,m2,m3,m4))  ==>
   (event(Rin_2(k2,n2,m1,m2,m3))  ==>
   (event(Iout_2(k1,n1,m1,m2,m3))  ==>
   (event(Iin_1(k1,n1,m1,m2))  ==>
   (event(Rout_1(k2,n2,m1,m2))  ==>
   (event(Rin_1(k2,n2,m1))  ==>
   (event(Iout_1(k1,n1,m1))))))))))))).


(* == PROTOCOL WITH EVENTS == *)
let SYSTEM =
( !
  new userB : bitstring;
  new userA : bitstring;
     !
      new sess : bitstring;
      ((
        new xv: bitstring;
        event Iout_1(userB,sess,(exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)));
        out(c, (exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)));
        in(c, x_75: bitstring);
        event Iin_1(userB,sess,(exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)),x_75);
        let ((xhc: bitstring,xsc: bitstring)) = x_75 in
        let (=accept) = verifySD(xsc) in
        let ((=empty,=f1((exp(g,xv),xhc)),=empty)) = getPublicSD(xsc) in
        event Itest_1(userB,sess,(exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)),x_75);
        event Iout_2(userB,sess,(exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)),x_75,senc((c1,OK),f2(exp(xhc,xv))));
        out(c, senc((c1,OK),f2(exp(xhc,xv))));
        in(c, y_76: bitstring);
        event Iin_2(userB,sess,(exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)),x_75,senc((c1,OK),f2(exp(xhc,xv))),y_76);
        let ((=c2,=OK)) = sdec(y_76,f2(exp(xhc,xv))) in
        event Itest_2(userB,sess,(exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)),x_75,senc((c1,OK),f2(exp(xhc,xv))),y_76);
        new n: bitstring;
        event Iout_3(userB,sess,(exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)),x_75,senc((c1,OK),f2(exp(xhc,xv))),y_76,senc((n,requestIsOver18),f2(exp(xhc,xv))));
        out(c, senc((n,requestIsOver18),f2(exp(xhc,xv))));
        in(c, z_77: bitstring);
        event Iin_3(userB,sess,(exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)),x_75,senc((c1,OK),f2(exp(xhc,xv))),y_76,senc((n,requestIsOver18),f2(exp(xhc,xv))),z_77);
        let ((=isOver18,xsv_78: bitstring)) = sdec(z_77,f2(exp(xhc,xv))) in
        let (=accept) = verifySD(xsv_78) in
        let ((=OrgaAge,=f3((n,exp(xhc,xv))),=isOver18)) = getPublicSD(xsv_78) in
        event Itest_3(userB,sess,(exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)),x_75,senc((c1,OK),f2(exp(xhc,xv))),y_76,senc((n,requestIsOver18),f2(exp(xhc,xv))),z_77);
        event Iout_4(userB,sess,(exp(g,xv),SD(cred(skS(OrgaCheckAge),MS(userB),movieTheater),OrgaCheckAge,MS(userB),f1(exp(g,xv)),movieTheater)),x_75,senc((c1,OK),f2(exp(xhc,xv))),y_76,senc((n,requestIsOver18),f2(exp(xhc,xv))),z_77,OK);
        out(c, OK)
      )|(
        in(c, x_72: bitstring);
        event Rin_1(userB,sess,x_72);
        let ((xhv: bitstring,xsv: bitstring)) = x_72 in
        let (=accept) = verifySD(xsv) in
        let ((=OrgaCheckAge,=f1(xhv),=movieTheater)) = getPublicSD(xsv) in
        event Rtest_1(userB,sess,x_72);
        new xc: bitstring;
        event Rout_1(userB,sess,x_72,(exp(g,xc),SD(cred(skS(OrgaAge),MS(userA),isOver18),empty,MS(userA),f1((xhv,exp(g,xc))),empty)));
        out(c, (exp(g,xc),SD(cred(skS(OrgaAge),MS(userA),isOver18),empty,MS(userA),f1((xhv,exp(g,xc))),empty)));
        in(c, y_73: bitstring);
        event Rin_2(userB,sess,x_72,(exp(g,xc),SD(cred(skS(OrgaAge),MS(userA),isOver18),empty,MS(userA),f1((xhv,exp(g,xc))),empty)),y_73);
        let ((=c1,=OK)) = sdec(y_73,f2(exp(xhv,xc))) in
        event Rtest_2(userB,sess,x_72,(exp(g,xc),SD(cred(skS(OrgaAge),MS(userA),isOver18),empty,MS(userA),f1((xhv,exp(g,xc))),empty)),y_73);
        event Rout_2(userB,sess,x_72,(exp(g,xc),SD(cred(skS(OrgaAge),MS(userA),isOver18),empty,MS(userA),f1((xhv,exp(g,xc))),empty)),y_73,senc((c2,OK),f2(exp(xhv,xc))));
        out(c, senc((c2,OK),f2(exp(xhv,xc))));
        in(c, z: bitstring);
        event Rin_3(userB,sess,x_72,(exp(g,xc),SD(cred(skS(OrgaAge),MS(userA),isOver18),empty,MS(userA),f1((xhv,exp(g,xc))),empty)),y_73,senc((c2,OK),f2(exp(xhv,xc))),z);
        let ((xn: bitstring,=requestIsOver18)) = sdec(z,f2(exp(xhv,xc))) in
        event Rtest_3(userB,sess,x_72,(exp(g,xc),SD(cred(skS(OrgaAge),MS(userA),isOver18),empty,MS(userA),f1((xhv,exp(g,xc))),empty)),y_73,senc((c2,OK),f2(exp(xhv,xc))),z);
        event Rout_3(userB,sess,x_72,(exp(g,xc),SD(cred(skS(OrgaAge),MS(userA),isOver18),empty,MS(userA),f1((xhv,exp(g,xc))),empty)),y_73,senc((c2,OK),f2(exp(xhv,xc))),z,senc((isOver18,SD(cred(skS(OrgaAge),MS(userA),isOver18),OrgaAge,MS(userA),f3((xn,exp(xhv,xc))),isOver18)),f2(exp(xhv,xc))));
        out(c, senc((isOver18,SD(cred(skS(OrgaAge),MS(userA),isOver18),OrgaAge,MS(userA),f3((xn,exp(xhv,xc))),isOver18)),f2(exp(xhv,xc))))
      ))
)
.
process SYSTEM
