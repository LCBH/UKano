(* MODIFIED TO TEST A STRONG DEF OF UK using UKANO, variant (b) in Section 6.6.2 (i.e., sKI is an identity parameter)
 * MINIMAL VERSION FOR DAA SIGN
 * Lucca Hirschi
 * 01/10/2018
 *)

(*
	Based on:

		Smyth, B., Ryan, M., & Chen, L. (2012) Formal analysis of anonymity in Direct Anonymous Attestation schemes.

	The script models the fixed RSA-based Direct Anonymous Attestation process specification <Join_RSA', Sign_RSA'>.

*)

(***************)
(* ==THEORY==  *)
(***************)
free c:channel.

fun accept () :bitstring.
fun zero() :bitstring.
fun one() :bitstring.
fun FJoin() :bitstring.
fun FSign() :bitstring.
fun hash(bitstring) :bitstring.
fun pk(bitstring) :bitstring.
fun commit(bitstring,bitstring):bitstring.
fun circ(bitstring,bitstring):bitstring.
fun clcommit(bitstring,bitstring,bitstring) :bitstring.
fun spk(bitstring,bitstring,bitstring) :bitstring.
fun clsign(bitstring,bitstring,bitstring,bitstring):bitstring.
fun getmsgspk(bitstring) :bitstring.

(* Signature + blind signtaure *)
reduc forall xsk:bitstring,xprime:bitstring,xrand:bitstring,xmsg:bitstring;
  clgetprime(clsign(xsk,xprime,xrand,xmsg)) = xprime.
reduc forall xsk:bitstring,xprime:bitstring,xrand:bitstring,xmsg:bitstring;
  clgetnonce(clsign(xsk,xprime,xrand,xmsg)) = xrand.
reduc forall xsk:bitstring,xprime:bitstring,xrand:bitstring,xmsg:bitstring;
  checkclsign(pk(xsk),xmsg,clsign(xsk,xprime,xrand,xmsg)) 
				= accept.
fun clopen(bitstring,bitstring,bitstring) :bitstring
reduc forall x:bitstring,xrand:bitstring,xplain:bitstring;
  clopen(x,xrand,clcommit(x,xrand,xplain)) = xplain
otherwise forall xsk:bitstring,xrand:bitstring,yprime:bitstring,yrand:bitstring,xmsg:bitstring;
  clopen(pk(xsk),xrand,clsign(xsk,yprime,yrand,
	clcommit(pk(xsk),xrand,xmsg))) = clsign(xsk,yprime,xrand,xmsg).
(* ZK of sign *)
reduc forall xzeta:bitstring,xsk:bitstring,xtsk:bitstring,xw:bitstring,xe:bitstring,xv:bitstring,xrand:bitstring,yprime:bitstring,yrand:bitstring,xmsg:bitstring;
   checkspk(FSign,
            (xzeta,pk(xsk),commit(xtsk,xzeta),
	        clcommit(pk(xsk),xw,clsign(xsk,xe,xv,xtsk)),xmsg),
            spk(FSign,(xtsk,xw),(xzeta,pk(xsk),commit(xtsk,xzeta),
	        clcommit(pk(xsk),xw,clsign(xsk,xe,xv,xtsk)),xmsg)))
   = accept.

fun KI():bitstring.    (* Long-term public key of Issuer *)

(*
event END().
query event(END()).
*)

(****************)
(* ==PROTOCOL== *)
(****************)

let SignerP(cre:bitstring,tsk:bitstring,skI:bitstring)  = 
    new msg :bitstring;  (* message to sign *)
    in(c,x:bitstring);
    let (nv:bitstring,xpkI:bitstring) = x in
    if xpkI = pk(skI) then (* safe tets *)
    new nt :bitstring;
    new w :bitstring;
    new zeta :bitstring; (* when bsnv <> \bot, this is hash((one,bsnv)) *)
    let crehat:bitstring = clcommit(pk(skI),w,cre) in 
    let NV:bitstring = commit(tsk,zeta) in
    new tsk_hole:bitstring;
    new r1:bitstring;
    new r2:bitstring;    
    out(c,(zeta,pk(skI),NV,crehat,nt,msg,
            spk(FSign,
	        (tsk,w),
		(zeta,pk(skI),NV,crehat,(nt,nv,msg))))).
(* The following idealization is not conform:		
    	   (zeta,pk(skI),commit(tsk_hole,zeta), clcommit(pk(skI),w,clsign(skI,r1,r2,tsk_hole)),nt,msg,
            spk(FSign,
	        (tsk_hole,w),
		(zeta,pk(skI),commit(tsk_hole,zeta), clcommit(pk(skI),w,clsign(skI,r1,r2,tsk_hole)),(nt,nv,msg))))
*)

let VerifierP(pkI:bitstring) =
  new nv :bitstring;
  out(c,(nv,pkI));   (* Verifier sends pkI so that attacker gets the isser's public key *)
  in(c, x:bitstring);
  let (xz:bitstring, =pkI,xNV:bitstring,xcreH:bitstring,xnt:bitstring,xmsg:bitstring,xZK:bitstring) = x in
(* Verify ZK *)
  let (=accept) = checkspk(FSign, (xz, pkI, xNV, xcreH, (xnt,nv,xmsg)), xZK) in
  out(c,accept).
  

let SYSTEM = 
(* Names from JOIN PROTOCOl *)
! (* ID *)
 new cnt :bitstring;
 new DAASeed :bitstring;
 new r1 :bitstring;  (* yrand (of cred) *)
 new r2 :bitstring;  (* yprime (of cred) *)
 new skI :bitstring; (* Issuer's identity (as an identity parameter: case(b))*)
! (* Session *)
(
  SignerP(clsign(skI,r1,r2,hash((hash((DAASeed,hash(KI))),cnt,zero))), (* signed credential obtained through DAA join *)
	  hash((hash((DAASeed,hash(KI))),cnt,zero)), skI)            (* message tsk that has been signed *)
|
  VerifierP(pk(skI))
).

process SYSTEM