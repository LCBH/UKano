(* MODIFIED TO TEST A STRONG DEF OF UK using UKANO 
 * MINIMAL VERSION FOR DAA JOIN
 * Lucca Hirschi
 * 23/03/2016
 *)

(* REMARKS:
If basename may be equal between two sessions, conditions do not hold anymore nor unlinkability.
*)

(*
	Based on:

		Smyth, B., Ryan, M., & Chen, L. (2012) Formal analysis of anonymity in Direct Anonymous Attestation schemes.

	The script models the fixed RSA-based Direct Anonymous Attestation process specification <Join_RSA', Sign_RSA'>.

*)

(***************)
(* ==THEORY==  *)
(***************)
free c:channel.

fun accept () :bitstring.
fun zero() :bitstring.
fun one() :bitstring.
fun FJoin() :bitstring.
fun FSign() :bitstring.
fun hash(bitstring) :bitstring.
fun apk(bitstring) :bitstring.  (* Asymmetric Public key *)
fun pk(bitstring) :bitstring.   (* Signature public key *)
fun commit(bitstring,bitstring):bitstring.
fun circ(bitstring,bitstring):bitstring.
fun clcommit(bitstring,bitstring,bitstring) :bitstring.
fun spk(bitstring,bitstring,bitstring) :bitstring.
fun clsign(bitstring,bitstring,bitstring,bitstring):bitstring.
fun penc(bitstring,bitstring,bitstring) : bitstring.
fun dec(bitstring,bitstring) : bitstring.
(*
fun clgetnonce(bitstring) :bitstring.
fun clgetprime(bitstring) :bitstring.
fun checkclsign(bitstring,bitstring,bitstring) :bitstring.
fun checkspk(bitstring,bitstring,bitstring) :bitstring.
*)

fun bottom() :bitstring.
fun ok() :bitstring.
fun hole() :bitstring.


(* Assymetric encryption *)
equation forall k:bitstring, r:bitstring, m:bitstring;
   dec(k,penc(apk(k),r,m)) = m.
(* Signature + blind signtaure *)
reduc forall xsk:bitstring,xprime:bitstring,xrand:bitstring,xmsg:bitstring;
  clgetprime(clsign(xsk,xprime,xrand,xmsg)) = xprime.
reduc forall xsk:bitstring,xprime:bitstring,xrand:bitstring,xmsg:bitstring;
  clgetnonce(clsign(xsk,xprime,xrand,xmsg)) = xrand.
reduc forall xsk:bitstring,xprime:bitstring,xrand:bitstring,xmsg:bitstring;
  checkclsign(pk(xsk),xmsg,clsign(xsk,xprime,xrand,xmsg)) 
				= accept.

fun clopen(bitstring,bitstring,bitstring):bitstring
reduc
forall xsk:bitstring,xrand:bitstring,yprime:bitstring,yrand:bitstring,xmsg:bitstring;
  clopen(pk(xsk),xrand,clsign(xsk,yprime,yrand,
  	clcommit(pk(xsk),xrand,xmsg))) = clsign(xsk,yprime,xrand,xmsg)
otherwise
forall x:bitstring,xrand:bitstring,xplain:bitstring;
  clopen(x,xrand,clcommit(x,xrand,xplain)) = xplain.

(* ZK of join *)
reduc forall xzeta:bitstring,xsk:bitstring,xtsk:bitstring,xw:bitstring,xe:bitstring,xv:bitstring,xrand:bitstring,yprime:bitstring,yrand:bitstring,xmsg:bitstring, xpk:bitstring;
    checkspk(FJoin,
             (xzeta,xpk,commit(xtsk,xzeta),clcommit(xpk,xv,xtsk),xmsg),
             spk(FJoin,
	         (xtsk,xv),
		 (xzeta,xpk,commit(xtsk,xzeta),
		 clcommit(xpk,xv,xtsk),xmsg)
		 )
	     )
	     = accept.

fun KI():bitstring.    (* Long-term public key of Issuer *)
fun skI():bitstring [private].   (* Signature key of Issuer *)
reduc getPubskI() = pk(skI).

(*
event END().
query event(END()).
*)

(****************)
(* ==PROTOCOL== *)
(****************)

let join(pkI:bitstring, bsnI:bitstring,KI:bitstring,DAASeed:bitstring,cnt:bitstring,skM:bitstring) =
    new DAASeeN:bitstring;
    new zetaIN:bitstring;
    new tskN:bitstring;

    new v':bitstring;

    out(c, choice[
               (commit(hash((hash((DAASeed,hash(KI))),cnt,zero)),hash((zero,bsnI))), clcommit(pkI,v',hash((hash((DAASeed,hash(KI))),cnt,zero)))),
               (commit(tskN,zetaIN), clcommit(pkI,v',tskN))]);
    in(c,encNe:bitstring);
    out(c, choice[
               hash((clcommit(pkI,v',hash((hash((DAASeed,hash(KI))),cnt,zero))), dec(skM,encNe))),
               hash((clcommit(pkI,v',tskN), hole))]);

    in(c,ni:bitstring);
    new nt:bitstring;
    out(c, choice[
             (nt,hash((zero,bsnI)), spk(FJoin,(hash((hash((DAASeed,hash(KI))),cnt,zero)),v'),(hash((zero,bsnI)),pkI,commit(hash((hash((DAASeed,hash(KI))),cnt,zero)),hash((zero,bsnI))), clcommit(pkI,v',hash((hash((DAASeed,hash(KI))),cnt,zero))),(nt,ni)))),
             (nt,zetaIN,            spk(FJoin,(tskN,v'),(zetaIN,pkI,commit(tskN,zetaIN), clcommit(pkI,v',tskN),(nt,ni))))]);

    in(c,sig:bitstring);
    let cre = clopen(pkI,v',sig) in
    let (=accept) = checkclsign(pkI,hash((hash((DAASeed,hash(KI))),cnt,zero)),cre) in
    out(c,ok).
    
let Issuer(skI:bitstring, pkM:bitstring) =
    in(c,x:bitstring);
    let (xNi:bitstring, xU:bitstring) = x in
    new n:bitstring;
    new ne:bitstring;
    out(c, choice[penc(pkM, n, ne), hole]);

    in(c,yau:bitstring);
    
    new ni:bitstring;
    out(c,ni);

    in(c,z:bitstring);
    new r1:bitstring;
    new r2:bitstring;
    let (xnt:bitstring, xzetaI:bitstring, xspk:bitstring) = z in
    if yau = hash((xU,ne)) then
    let (=accept) = checkspk(FJoin, (xzetaI, pk(skI),xNi,xU,(xnt,ni)), xspk) in
    out(c, (clsign(skI,r1,r2,xU))).

    
let SYSTEM = 
(* Names from JOIN PROTOCOl *)
! (* ID *)
 new DAASeed :bitstring;
 new skM :bitstring; (* mess (of cred) *)
! (* Session *)
(* If bsnI (basename) does not change from one session to the other, then FO does not hold and neither does UK *)
(
 new cnt :bitstring;
 new bsnI :bitstring; (* basename (of cred) *)
  join(pk(skI), bsnI, KI, DAASeed, cnt, skM)
|
  Issuer(skI, apk(skM))
).

process SYSTEM