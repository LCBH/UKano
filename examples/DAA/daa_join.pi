(* MODIFIED TO TEST A STRONG DEF OF UK using UKANO 
 * MINIMAL VERSION FOR DAA JOIN
 * Lucca Hirschi
 * 23/03/2016
 *)

(* REMARKS:
If basename may be equal between two sessions, conditions do not hold anymore nor unlinkability.
*)

(*
	Based on:

		Smyth, B., Ryan, M., & Chen, L. (2012) Formal analysis of anonymity in Direct Anonymous Attestation schemes.

	The script models the fixed RSA-based Direct Anonymous Attestation process specification <Join_RSA', Sign_RSA'>.

*)

(***************)
(* ==THEORY==  *)
(***************)
free c:channel.

fun accept () :bitstring.
fun zero() :bitstring.
fun one() :bitstring.
fun FJoin() :bitstring.
fun FSign() :bitstring.
fun clgetnonce(bitstring) :bitstring.
fun clgetprime(bitstring) :bitstring.
fun hash(bitstring) :bitstring.
fun pk(bitstring) :bitstring.
fun commit(bitstring,bitstring):bitstring.
fun circ(bitstring,bitstring):bitstring.
fun checkclsign(bitstring,bitstring,bitstring) :bitstring.
fun checkspk(bitstring,bitstring,bitstring) :bitstring.
fun clcommit(bitstring,bitstring,bitstring) :bitstring.
fun clopen(bitstring,bitstring,bitstring) :bitstring.
fun spk(bitstring,bitstring,bitstring) :bitstring.
fun clsign(bitstring,bitstring,bitstring,bitstring):bitstring.
fun getmsgspk(bitstring) :bitstring.
fun penc(bitstring,bitstring,bitstring) : bitstring.
fun dec(bitstring,bitstring) : bitstring.

fun bottom() :bitstring.
fun KI() :bitstring.
fun ok() :bitstring.
fun hole() :bitstring.
fun skI() :bitstring [private]. (* Signature key of Issuer *)


(* Assymetric encryption *)
equation forall k:bitstring, r:bitstring, m:bitstring;
   dec(k,penc(pk(k),r,m)) = m.
(* Signature + blind signtaure *)
equation forall xsk:bitstring,xprime:bitstring,xrand:bitstring,xmsg:bitstring;
  clgetprime(clsign(xsk,xprime,xrand,xmsg)) = xprime.
equation forall xsk:bitstring,xprime:bitstring,xrand:bitstring,xmsg:bitstring;
  clgetnonce(clsign(xsk,xprime,xrand,xmsg)) = xrand.
equation forall xsk:bitstring,xprime:bitstring,xrand:bitstring,xmsg:bitstring;
  checkclsign(pk(xsk),xmsg,clsign(xsk,xprime,xrand,xmsg)) 
				= accept.
equation forall x:bitstring,xrand:bitstring,xplain:bitstring;
  clopen(x,xrand,clcommit(x,xrand,xplain)) = xplain.
equation forall xsk:bitstring,xrand:bitstring,yprime:bitstring,yrand:bitstring,xmsg:bitstring;
  clopen(pk(xsk),xrand,clsign(xsk,yprime,yrand,
	clcommit(pk(xsk),xrand,xmsg))) = clsign(xsk,yprime,xrand,xmsg).
(* ZK of join + sign *)
equation forall xzeta:bitstring,xsk:bitstring,xtsk:bitstring,xw:bitstring,xe:bitstring,xv:bitstring,xrand:bitstring,yprime:bitstring,yrand:bitstring,xmsg:bitstring;
   checkspk(FSign,(xzeta,pk(xsk),commit(xtsk,xzeta),
	    clcommit(pk(xsk),xw,clsign(xsk,xe,xv,xtsk)),xmsg),
    spk(FSign,(xtsk,xw),(xzeta,pk(xsk),commit(xtsk,xzeta),
		clcommit(pk(xsk),xw,clsign(xsk,xe,xv,xtsk)),xmsg))) = accept.
equation forall xzeta:bitstring,xsk:bitstring,xtsk:bitstring,xw:bitstring,xe:bitstring,xv:bitstring,xrand:bitstring,yprime:bitstring,yrand:bitstring,xmsg:bitstring;
    getmsgspk(spk(FSign,(xtsk,xw),(xzeta,pk(xsk),commit(xtsk,xzeta),
		clcommit(pk(xsk),xw,clsign(xsk,xe,xv,xtsk)),xmsg))) = xmsg.


(****************)
(* ==PROTOCOL== *)
(****************)

let join(pkI:bitstring, bsnI:bitstring,KI:bitstring,DAASeed:bitstring,cnt:bitstring,skM:bitstring) =  
    new v':bitstring;
    let zetaI = hash((zero,bsnI)) in
    let tsk = hash((hash((DAASeed,hash(KI))),cnt,zero)) in
    let NI = commit(tsk,zetaI) in
    let U = clcommit(pkI,v',tsk) in


    new NEtsk:bitstring;
    new NEzeta:bitstring;
    new NENI:bitstring;
    new NEU:bitstring;
    
    out(c,(NI,U));
    
    in(c,encNe:bitstring);
    out(c, hash((U, dec(skM,encNe))));
 
    in(c,ni:bitstring);
    new nt:bitstring;
    out(c, (nt,spk(FJoin,(tsk,v'),(zetaI,pkI,NI,U,(nt,ni)))));

    in(c,sig:bitstring);
    let cre = clopen(pkI,v',sig) in 
    if checkclsign(pkI,tsk,cre) = accept then 

    out(c,ok).

let Issuer(skI:bitstring, pkM:bitstring, bsnI:bitstring) =
    in(c,x:bitstring);
    new n:bitstring;
    new ne:bitstring;
    out(c, penc(pkM, n, ne));

    in(c,yau:bitstring);
    new ni:bitstring;
    out(c,ni);

    in(c,z:bitstring);
    new e:bitstring;
    new v'':bitstring;
    let (xnt:bitstring, xspk:bitstring) = z in
    let (xNi:bitstring, xU:bitstring) = x in
    if yau = hash((xU,ne)) then
    let zetaI = hash((zero,bsnI)) in
    if checkspk(FJoin, (zetaI, pk(skI),xNi,
                       xU),
		       xspk) = accept
    then out(c, clsign(skI, e,v'',xU)).
    
let SYSTEM = 
(* Names from JOIN PROTOCOl *)
! (* ID *)
 new cnt :bitstring;
 new DAASeed :bitstring;
 new skM :bitstring; (* mess (of cred) *)
! (* Session *)
(* If bsnI (basename) does not change from one session to the other, then FO does not hold and neither does UK *)
  new bsnI :bitstring; (* basename (of cred) *)
(
  join(pk(skI), bsnI, KI, DAASeed, cnt, skM)
|
  Issuer(skI, pk(skM), bsnI)
).

process SYSTEM