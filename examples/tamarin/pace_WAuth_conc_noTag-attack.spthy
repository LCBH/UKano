theory PaceTheory
begin

section{* PACE *}

/*
 * Protocol: PACE
 * Modeler:  Lucca Hirschi
 * Date:     Janurary 2016
 * Source:   ICAO Spec: http://www.icao.int/publications/pages/publication.aspx?docnum=9303
 * Property: Unlinkability: this file contains sanity checks and the Well-Authentication for the
 *           first unsafe test of the Tag's role. It does not hold (concurent sessions)
 *
 * Status:   - modelization of prototocol: done
 *           - sanity check: done
 *           - proof of Unlinkability using our method: ====> attack is found <=====
*/
	 
builtins: symmetric-encryption, diffie-hellman

functions: gen/2, mac/2


/****************/
/* Whole system */
/****************/
rule Init: //
 [ ] --[Init()]-> [!System()]

rule RepId: //Rep, new k
 [ !System(), Fr(~k)] --[NewId(~k)]-> [!RepSess(~k)]

rule RepSess: //Rep, new s, Par
 [ !RepSess(~k), Fr(~s),Fr(~b1),Fr(~b2),Fr(~a1),Fr(~a2)] --[NewSess(~k,~s), TagInit(~k, ~s, ~b1, ~b2), ReaderInit(~k, ~s, ~a1, ~a2)]-> [Tag2(~b1, ~b2, ~k, ~s), Reader2(~a1, ~a2, ~k, ~s)]


/*******************/
/* TAG (ePassport) */
/*******************/
rule Tout_1: //out senc(s, k) 
 [ Tag2(~b1, ~b2, ~k, ~s)] --[OutT1(~k,~s,senc(~s,~k))]-> [Out(senc(~s, ~k)), Tag3(~b1, ~b2, ~k, ~s)]

rule Tin_1: //in x1 
 [ Tag3(~b1, ~b2, ~k, ~s), In(x1)] --[InT1(~k,~s,x1)]-> [Tag4(~b1, ~b2, ~k, ~s, x1)]

rule Tout_2: //out ('g') ^ (b1) 
 [ Tag4(~b1, ~b2, ~k, ~s, x1)] --[OutT2(~k,~s,'g'^(~b1))]-> [Out('g'^(~b1)), Tag5(~b1, ~b2, ~k, ~s, x1)]

rule Tin_2: //in x2 
 [ Tag5(~b1, ~b2, ~k, ~s, x1), In(x2)] --[InT2(~k,~s,x2)]-> [Tag6(~b1, ~b2, ~k, ~s, x1, x2)]

rule Tout_3: //out (gen(('g') ^ (s), (x1) ^ (b1))) ^ (b2) 
let newG = gen('g'^(~s), x1^(~b1))
in
[ Tag6(~b1, ~b2, ~k, ~s, x1, x2)] --[OutT3(~k,~s,newG^(~b2))]-> [Out(newG^(~b2)), Tag7(~b1, ~b2, ~k, ~s, x1, x2)]

rule Tin_3: //in x3 
 [ Tag7(~b1, ~b2, ~k, ~s, x1, x2), In(x3)] --[InT3(~k,~s,x3)]-> [Tag8(~b1, ~b2, ~k, ~s, x1, x2, x3)]

rule TtestMac_then: //if eq(mac((gen(('g') ^ (s), (x1) ^ (b1))) ^ (b2), (x2) ^ (b2)), x3) 
let newG = gen('g'^(~s), x1^(~b1))
    newKey = x2^(~b2)
in
[ Tag8(~b1, ~b2, ~k, ~s, x1, x2, x3)] --[TestT1(~k,~s), Pred_eq(mac(newG^(~b2), newKey), x3)]-> [Tag9(~b1, ~b2, ~k, ~s, x1, x2, x3)]

rule TtestMac_else: //else, if eq(mac((gen(('g') ^ (s), (x1) ^ (b1))) ^ (b2), (x2) ^ (b2)), x3) 
let newG = gen('g'^(~s), x1^(~b1))
    newKey = x2^(~b2)
in
[ Tag8(~b1, ~b2, ~k, ~s, x1, x2, x3)] --[Pred_not_eq(mac(newG^(~b2), newKey), x3)]-> [EndTag(~k)]

rule Tout4: //out mac(x2, (x2) ^ (b2)) 
let newG = gen('g'^(~s), x1^(~b1))
    newKey = x2^(~b2)
in
 [ Tag9(~b1, ~b2, ~k, ~s, x1, x2, x3)] --[SessionT(~k, ~s)]-> [Out(mac(x2, newKey)), EndTag(~k)]



/**********/
/* Reader */
/**********/
rule Rin_1: //in y1 
 [ Reader2(~a1, ~a2, ~k, ~s), In(y1)] --[InR1(~k,~s,y1)]-> [Reader3(~a1, ~a2, ~k, ~s, y1)]

rule Rout_1: //out ('g') ^ (a1) 
 [ Reader3(~a1, ~a2, ~k, ~s, y1)] --[OutR1(~k,~s,'g'^(~a1))]-> [Out('g'^(~a1)), Reader4(~a1, ~a2, ~k, ~s, y1)]

rule Rin_2: //in y2 
 [ Reader4(~a1, ~a2, ~k, ~s, y1), In(y2)] --[InR2(~k,~s,y2)]-> [Reader5(~a1, ~a2, ~k, ~s, y1, y2)]

rule Rout_2: //out (gen(('g') ^ (sdec(y1, ~k)), (y2) ^ (a1))) ^ (a2) 
let xs = sdec(y1, ~k)
    newG = gen('g'^xs, y2^(~a1))
in
[ Reader5(~a1, ~a2, ~k, ~s, y1, y2)] --[OutR2(~k,~s,newG^(~a2))]-> [Out(newG^(~a2)), Reader6(~a1, ~a2, ~k, ~s, y1, y2)]

rule Rin_3: //in y3 
 [ Reader6(~a1, ~a2, ~k, ~s, y1, y2), In(y3)] --[InR3(~k,~s,y3)]-> [Reader7(~a1, ~a2, ~k, ~s, y1, y2, y3)]

rule RtestRefl_then: //if neq(y3, (gen(('g') ^ (sdec(y1, ~k)), (y2) ^ (a1))) ^ (a2)) 
let xs = sdec(y1, ~k)
    newG = gen('g'^xs, y2^(~a1))
in
[ Reader7(~a1, ~a2, ~k, ~s, y1, y2, y3)] --[Pred_not_eq(y3, newG^(~a2))]-> [Reader8(~a1, ~a2, ~k, ~s, y1, y2, y3)]

rule RtestRefl_else: //else, if neq(y3, (gen(('g') ^ (sdec(y1, ~k)), (y2) ^ (a1))) ^ (a2)) 
let xs = sdec(y1, ~k)
    newG = gen('g'^xs, y2^(~a1))
in
[ Reader7(~a1, ~a2, ~k, ~s, y1, y2, y3)] --[Pred_eq(y3, newG^(~a2))]-> [EndReader(~k)]

rule Rout_3: //out mac(y3, (y3) ^ (a2)) 
[ Reader8(~a1, ~a2, ~k, ~s, y1, y2, y3)] --[OutR3(~k,~s,mac(y3, y3^(~a2)))]-> [Out(mac(y3, y3^(~a2))), Reader9(~a1, ~a2, ~k, ~s, y1, y2, y3)]

rule Rin_4: //in y4 
 [ Reader9(~a1, ~a2, ~k, ~s, y1, y2, y3), In(y4)] --[]-> [Reader10(~a1, ~a2, ~k, ~s, y1, y2, y3, y4)]

rule RtestMac_then: //if eq(mac((gen(('g') ^ (sdec(y1, ~k)), (y2) ^ (a1))) ^ (a2), (y3) ^ (a2)), y4) 
let xs = sdec(y1, ~k)
    newG = gen('g'^xs, y2^(~a1))
    newKey = y3^(~a2)
in
[ Reader10(~a1, ~a2, ~k, ~s, y1, y2, y3, y4)] --[Pred_eq(mac(newG^(~a2), newKey), y4)]-> [Reader11(~a1, ~a2, ~k, ~s, y1, y2, y3, y4)]

rule RtestMac_else: //else, if eq(mac((gen(('g') ^ (sdec(y1, ~k)), (y2) ^ (a1))) ^ (a2), (y3) ^ (a2)), y4) 
let xs = sdec(y1, ~k)
    newG = gen('g'^xs, y2^(~a1))
    newKey = y3^(~a2)
in
[ Reader10(~a1, ~a2, ~k, ~s, y1, y2, y3, y4)] --[Pred_not_eq(mac(newG^(~a2), newKey), y4)]-> [EndReader(~k)]

rule Rout_4: //out 'ok' 
 [ Reader11(~a1, ~a2, ~k, ~s, y1, y2, y3, y4)] --[SessionR(~k, ~s)]-> [Out('ok'), EndReader(~k)]



/**********/
/* Axioms */
/**********/
axiom predicate_not_eq:
	"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"

axiom predicate_eq:
	"All #i a b. Pred_eq(a,b)@i ==> a = b"

axiom single_session: // for a single session
	"All #i #j. Init()@i & Init()@j ==> #i=#j"


/*
axiom immeadiate_in:
	"All t #i . ChannelInEvent(t)@i
		==> Ex #j. K(t)@j & #j<#i
			& (All #k. Event()@k  ==> #k<#j | #i<#k)
			& (All #k t2 . K(t2)@k  ==> #k<#j | #i<#k | #k=#j)
                                     "
                
axiom locking:
	"All n x np #i #j . Lock(n,x)@i & Lock(np,x)@j 
		==> 
		( #i<#j 
			& (Ex #k. Unlock(n,x)@k & #i<#k & #k<#j 
                         & (All  #m . Unlock(n,x)@m ==> #m=#k) 
                         & (All np #m . Lock(np,x)@m ==> #m<#i | #m=#i | #k<#m) 
			 & (All np #m . Unlock(np,x)@m ==> #m<#i | #k<#m | #k=#m )
			))
		| #j<#i | #i=#j "
*/


/**********/
/* Lemmas */
/**********/
/* Easy lemmas for sanity check */
lemma secrecyTag1 :
"	not( Ex k s b1 b2 #t1. ((TagInit(k, s, b1, b2)@t1 & Ex #t2. K(k)@t2)))"
lemma secrecyTag2 :
"	not( Ex k s b1 b2 #t1. ((TagInit(k, s, b1, b2)@t1 & Ex #t2. K(s)@t2)))"
lemma secrecyTag3 :
"	not( Ex k s b1 b2 #t1. ((TagInit(k, s, b1, b2)@t1 & Ex #t2. K(b1)@t2)))"
lemma secrecyTag4 :
"	not( Ex k s b1 b2 #t1. ((TagInit(k, s, b1, b2)@t1 & Ex #t2. K(b2)@t2)))"

lemma secrecyReader1 :
"	not( Ex k s a1 a2 #t1 #t2. ((ReaderInit(k, s, a1, a2)@t1 &  K(k)@t2)))"
lemma secrecyReader2 :
"	not( Ex k s a1 a2 #t1 #t2. ((ReaderInit(k, s, a1, a2)@t1 &  K(s)@t2)))"
lemma secrecyReader3 :
"	not( Ex k s a1 a2 #t1 #t2. ((ReaderInit(k, s, a1, a2)@t1 &  K(a1)@t2)))"
lemma secrecyReader4 :
"	not( Ex k s a1 a2 #t1 #t2. ((ReaderInit(k, s, a1, a2)@t1 &  K(a2)@t2)))"

lemma tagComplete: //for sanity
	exists-trace 
	"Ex #t k s. SessionR(k,s)@t"

lemma readerComplete: //for sanity
	exists-trace
	"Ex #t k s. SessionT(k,s)@t"


/* WA */
lemma TestT1 :
"
   All k s1 #t1.
     TestT1(k,s1)@t1 ==>
        (Ex mR3 #t2. InT3(k,s1,mR3)@t2 &
          (Ex s2 #t3. OutR3(k,s2,mR3)@t3 &
            (Ex mT3 #t4. InR3(k,s2,mT3)@t4 &
               (Ex #t5. OutT3(k,s1,mT3)@t5 &
                 (Ex mR2 #t6. InT2(k,s1,mR2)@t6 &
                   (Ex #t7. OutR2(k,s2,mR2)@t7 &
                     (Ex mT2 #t8. InR2(k,s2,mT2)@t8 &
                       (Ex #t9. OutT2(k,s1,mT2)@t9 &
                         (Ex mR1 #t10. InT1(k,s1,mR1)@t10 &
                           (Ex #t11. OutR1(k,s2,mR1)@t11 &
                             (Ex mT1 #t12. InR1(k,s2,mT1)@t12 &
                               (Ex #t13. OutT1(k,s1,mT1)@t13
))))))))))))
"

end
